
tcd1304_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005654  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005828  08005828  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005830  08005830  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005830  08005830  00015830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059c4  20000014  0800584c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200059d8  0800584c  000259d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3f6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b23  00000000  00000000  0002c43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  0002df60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e64  00000000  00000000  0002f8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009109  00000000  00000000  0004573c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cda1  00000000  00000000  0004e845  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db5e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a0  00000000  00000000  000db664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080057d0 	.word	0x080057d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080057d0 	.word	0x080057d0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int i = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f001 fb0d 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f9ab 	bl	800083c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  get_Timer_clocks();
 80004e6:	f000 fdad 	bl	8001044 <get_Timer_clocks>
  //GPIO, TIM3, 4,
  ///HAL_Init, uart, dma
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 fd19 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ee:	f000 fce9 	bl	8000ec4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 fcbd 	bl	8000e70 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004f6:	f000 fa29 	bl	800094c <MX_ADC1_Init>
  MX_TIM2_Init();
 80004fa:	f000 fb0d 	bl	8000b18 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fe:	f000 fb73 	bl	8000be8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000502:	f000 fc4b 	bl	8000d9c <MX_TIM5_Init>
  MX_TIM4_Init();
 8000506:	f000 fbdb 	bl	8000cc0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800050a:	f000 fa71 	bl	80009f0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800050e:	f000 fa01 	bl	8000914 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000512:	2104      	movs	r1, #4
 8000514:	4898      	ldr	r0, [pc, #608]	; (8000778 <main+0x2a4>)
 8000516:	f003 fad7 	bl	8003ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800051a:	2108      	movs	r1, #8
 800051c:	4897      	ldr	r0, [pc, #604]	; (800077c <main+0x2a8>)
 800051e:	f003 fad3 	bl	8003ac8 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000522:	210c      	movs	r1, #12
 8000524:	4896      	ldr	r0, [pc, #600]	; (8000780 <main+0x2ac>)
 8000526:	f003 facf 	bl	8003ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 800052a:	2100      	movs	r1, #0
 800052c:	4895      	ldr	r0, [pc, #596]	; (8000784 <main+0x2b0>)
 800052e:	f003 fb49 	bl	8003bc4 <HAL_TIM_PWM_Start_IT>
  /*	Set counters close to expiration, as the integration times may be very long.
  	(For example: with an ICG-period of 300s we'd have to wait 600s for two ICG-
   	pulses if we don't cut the first one short.)
  	The SH-period is slightly delayed to comply with the CCD's timing requirements. */
	//TIM2->CNT = SH_period - SH_delay;// + (SH_period % 2);
	TIM1->CNT = SH_period - SH_delay;
 8000532:	4b95      	ldr	r3, [pc, #596]	; (8000788 <main+0x2b4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a95      	ldr	r2, [pc, #596]	; (800078c <main+0x2b8>)
 8000538:	3b0c      	subs	r3, #12
 800053a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM5->CNT = ICG_period - ICG_delay;
 800053c:	4b94      	ldr	r3, [pc, #592]	; (8000790 <main+0x2bc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a94      	ldr	r2, [pc, #592]	; (8000794 <main+0x2c0>)
 8000542:	3b0b      	subs	r3, #11
 8000544:	6253      	str	r3, [r2, #36]	; 0x24
	TIM3->CNT = fm_delay;
 8000546:	4b94      	ldr	r3, [pc, #592]	; (8000798 <main+0x2c4>)
 8000548:	2203      	movs	r2, #3
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
 byte[3-6]: The 4 bytes constituting the 32-bit int holding the SH-period
 byte[7-10]: The 4 bytes constituting the 32-bit int holding the ICG-period
 byte[11]: Continuous flag: 0 equals one acquisition, 1 equals continuous mode
 byte[12]: The number of integrations to average
*/
	aRxBuffer[0] = 69;
 800054c:	4b93      	ldr	r3, [pc, #588]	; (800079c <main+0x2c8>)
 800054e:	2245      	movs	r2, #69	; 0x45
 8000550:	701a      	strb	r2, [r3, #0]
	aRxBuffer[1] = 82;
 8000552:	4b92      	ldr	r3, [pc, #584]	; (800079c <main+0x2c8>)
 8000554:	2252      	movs	r2, #82	; 0x52
 8000556:	705a      	strb	r2, [r3, #1]
	aRxBuffer[2] = (SH_period >> 24) & 0xff;
 8000558:	4b8b      	ldr	r3, [pc, #556]	; (8000788 <main+0x2b4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	0e1b      	lsrs	r3, r3, #24
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b8e      	ldr	r3, [pc, #568]	; (800079c <main+0x2c8>)
 8000562:	709a      	strb	r2, [r3, #2]
	aRxBuffer[3] = (SH_period >> 16) & 0xff;
 8000564:	4b88      	ldr	r3, [pc, #544]	; (8000788 <main+0x2b4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0c1b      	lsrs	r3, r3, #16
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b8b      	ldr	r3, [pc, #556]	; (800079c <main+0x2c8>)
 800056e:	70da      	strb	r2, [r3, #3]
	aRxBuffer[4] = (SH_period >> 8) & 0xff;
 8000570:	4b85      	ldr	r3, [pc, #532]	; (8000788 <main+0x2b4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b88      	ldr	r3, [pc, #544]	; (800079c <main+0x2c8>)
 800057a:	711a      	strb	r2, [r3, #4]
	aRxBuffer[5] = SH_period & 0xff;
 800057c:	4b82      	ldr	r3, [pc, #520]	; (8000788 <main+0x2b4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b86      	ldr	r3, [pc, #536]	; (800079c <main+0x2c8>)
 8000584:	715a      	strb	r2, [r3, #5]
	aRxBuffer[6] = (ICG_period >> 24) & 0xff;
 8000586:	4b82      	ldr	r3, [pc, #520]	; (8000790 <main+0x2bc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	0e1b      	lsrs	r3, r3, #24
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b83      	ldr	r3, [pc, #524]	; (800079c <main+0x2c8>)
 8000590:	719a      	strb	r2, [r3, #6]
	aRxBuffer[7] = (ICG_period >> 16) & 0xff;
 8000592:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <main+0x2bc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4b80      	ldr	r3, [pc, #512]	; (800079c <main+0x2c8>)
 800059c:	71da      	strb	r2, [r3, #7]
	aRxBuffer[8] = (ICG_period >> 8) & 0xff;
 800059e:	4b7c      	ldr	r3, [pc, #496]	; (8000790 <main+0x2bc>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b7d      	ldr	r3, [pc, #500]	; (800079c <main+0x2c8>)
 80005a8:	721a      	strb	r2, [r3, #8]
	aRxBuffer[9] = ICG_period & 0xff;
 80005aa:	4b79      	ldr	r3, [pc, #484]	; (8000790 <main+0x2bc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b7a      	ldr	r3, [pc, #488]	; (800079c <main+0x2c8>)
 80005b2:	725a      	strb	r2, [r3, #9]
	aRxBuffer[10] = 0;
 80005b4:	4b79      	ldr	r3, [pc, #484]	; (800079c <main+0x2c8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	729a      	strb	r2, [r3, #10]
	aRxBuffer[11] = 1;
 80005ba:	4b78      	ldr	r3, [pc, #480]	; (800079c <main+0x2c8>)
 80005bc:	2201      	movs	r2, #1
 80005be:	72da      	strb	r2, [r3, #11]

	HAL_UART_Receive_DMA(&huart2, aRxBuffer, RxDataSize*sizeof(uint8_t));
 80005c0:	220c      	movs	r2, #12
 80005c2:	4976      	ldr	r1, [pc, #472]	; (800079c <main+0x2c8>)
 80005c4:	4876      	ldr	r0, [pc, #472]	; (80007a0 <main+0x2cc>)
 80005c6:	f004 f9b9 	bl	800493c <HAL_UART_Receive_DMA>
//	HAL_UART_Transmit_DMA(&huart2, aRxBuffer, RxDataSize);

	GPIOA->ODR ^= GPIO_PIN_5;
 80005ca:	4b76      	ldr	r3, [pc, #472]	; (80007a4 <main+0x2d0>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a75      	ldr	r2, [pc, #468]	; (80007a4 <main+0x2d0>)
 80005d0:	f083 0320 	eor.w	r3, r3, #32
 80005d4:	6153      	str	r3, [r2, #20]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (change_exposure_flag == 1)
 80005d6:	4b74      	ldr	r3, [pc, #464]	; (80007a8 <main+0x2d4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d14f      	bne.n	8000680 <main+0x1ac>
	{
		/* reset flag */
		change_exposure_flag = 0;
 80005e0:	4b71      	ldr	r3, [pc, #452]	; (80007a8 <main+0x2d4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]

		flush_CCD();
 80005e6:	f000 fd83 	bl	80010f0 <flush_CCD>

		/* set new integration time */
		ICG_period = nRxBuffer[6]<<24|nRxBuffer[7]<<16|nRxBuffer[8]<<8|nRxBuffer[9];
 80005ea:	4b70      	ldr	r3, [pc, #448]	; (80007ac <main+0x2d8>)
 80005ec:	799b      	ldrb	r3, [r3, #6]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	061a      	lsls	r2, r3, #24
 80005f2:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <main+0x2d8>)
 80005f4:	79db      	ldrb	r3, [r3, #7]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	431a      	orrs	r2, r3
 80005fc:	4b6b      	ldr	r3, [pc, #428]	; (80007ac <main+0x2d8>)
 80005fe:	7a1b      	ldrb	r3, [r3, #8]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	021b      	lsls	r3, r3, #8
 8000604:	4313      	orrs	r3, r2
 8000606:	4a69      	ldr	r2, [pc, #420]	; (80007ac <main+0x2d8>)
 8000608:	7a52      	ldrb	r2, [r2, #9]
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	4313      	orrs	r3, r2
 800060e:	461a      	mov	r2, r3
 8000610:	4b5f      	ldr	r3, [pc, #380]	; (8000790 <main+0x2bc>)
 8000612:	601a      	str	r2, [r3, #0]
		SH_period = nRxBuffer[2]<<24|nRxBuffer[3]<<16|nRxBuffer[4]<<8|nRxBuffer[5];
 8000614:	4b65      	ldr	r3, [pc, #404]	; (80007ac <main+0x2d8>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	061a      	lsls	r2, r3, #24
 800061c:	4b63      	ldr	r3, [pc, #396]	; (80007ac <main+0x2d8>)
 800061e:	78db      	ldrb	r3, [r3, #3]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	041b      	lsls	r3, r3, #16
 8000624:	431a      	orrs	r2, r3
 8000626:	4b61      	ldr	r3, [pc, #388]	; (80007ac <main+0x2d8>)
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	4313      	orrs	r3, r2
 8000630:	4a5e      	ldr	r2, [pc, #376]	; (80007ac <main+0x2d8>)
 8000632:	7952      	ldrb	r2, [r2, #5]
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	4313      	orrs	r3, r2
 8000638:	461a      	mov	r2, r3
 800063a:	4b53      	ldr	r3, [pc, #332]	; (8000788 <main+0x2b4>)
 800063c:	601a      	str	r2, [r3, #0]

		/*	Disable ICG (TIM5) and SH (TIM2) before reconfiguring*/
		//TIM_Cmd(TIM2, DISABLE);
		//TIM_Cmd(TIM5, DISABLE);
		//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800063e:	2104      	movs	r1, #4
 8000640:	484d      	ldr	r0, [pc, #308]	; (8000778 <main+0x2a4>)
 8000642:	f003 fa73 	bl	8003b2c <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_1);
 8000646:	2100      	movs	r1, #0
 8000648:	484e      	ldr	r0, [pc, #312]	; (8000784 <main+0x2b0>)
 800064a:	f003 fb33 	bl	8003cb4 <HAL_TIM_PWM_Stop_IT>

		/* 	Reconfigure TIM2 and TIM5 */
		MX_TIM1_Init();
 800064e:	f000 f9cf 	bl	80009f0 <MX_TIM1_Init>
		//MX_TIM2_Init();
		MX_TIM5_Init();
 8000652:	f000 fba3 	bl	8000d9c <MX_TIM5_Init>

		//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000656:	2104      	movs	r1, #4
 8000658:	4847      	ldr	r0, [pc, #284]	; (8000778 <main+0x2a4>)
 800065a:	f003 fa35 	bl	8003ac8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	4848      	ldr	r0, [pc, #288]	; (8000784 <main+0x2b0>)
 8000662:	f003 faaf 	bl	8003bc4 <HAL_TIM_PWM_Start_IT>

		//TIM2->CNT = SH_period - SH_delay;// + (SH_period % 2);
		TIM1->CNT = SH_period - SH_delay;// + (SH_period % 2);
 8000666:	4b48      	ldr	r3, [pc, #288]	; (8000788 <main+0x2b4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a48      	ldr	r2, [pc, #288]	; (800078c <main+0x2b8>)
 800066c:	3b0c      	subs	r3, #12
 800066e:	6253      	str	r3, [r2, #36]	; 0x24
		TIM5->CNT = ICG_period - ICG_delay;
 8000670:	4b47      	ldr	r3, [pc, #284]	; (8000790 <main+0x2bc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a47      	ldr	r2, [pc, #284]	; (8000794 <main+0x2c0>)
 8000676:	3b0b      	subs	r3, #11
 8000678:	6253      	str	r3, [r2, #36]	; 0x24
		TIM3->CNT = fm_delay;
 800067a:	4b47      	ldr	r3, [pc, #284]	; (8000798 <main+0x2c4>)
 800067c:	2203      	movs	r2, #3
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	switch (data_flag){
 8000680:	4b4b      	ldr	r3, [pc, #300]	; (80007b0 <main+0x2dc>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	3b01      	subs	r3, #1
 8000688:	2b03      	cmp	r3, #3
 800068a:	d8a4      	bhi.n	80005d6 <main+0x102>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <main+0x1c0>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006a5 	.word	0x080006a5
 8000698:	080006c9 	.word	0x080006c9
 800069c:	080006f9 	.word	0x080006f9
 80006a0:	08000737 	.word	0x08000737
	case 1:
		/* reset flags */
		data_flag = 0;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <main+0x2dc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
		if (coll_mode == 1)
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <main+0x2e0>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d102      	bne.n	80006ba <main+0x1e6>
			pulse_counter=6;
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <main+0x2e4>)
 80006b6:	2206      	movs	r2, #6
 80006b8:	701a      	strb	r2, [r3, #0]

		/* Transmit data in aTxBuffer */
		//UART2_Tx_DMA();
		HAL_UART_Transmit_DMA(&huart2, aTxBuffer, CCDSize*sizeof(uint16_t));
 80006ba:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 80006be:	493f      	ldr	r1, [pc, #252]	; (80007bc <main+0x2e8>)
 80006c0:	4837      	ldr	r0, [pc, #220]	; (80007a0 <main+0x2cc>)
 80006c2:	f004 f8cf 	bl	8004864 <HAL_UART_Transmit_DMA>
		break;
 80006c6:	e0a9      	b.n	800081c <main+0x348>

	case 2:
		/* reset flags */
		data_flag = 0;
 80006c8:	4b39      	ldr	r3, [pc, #228]	; (80007b0 <main+0x2dc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]

		/* This is the first integration of several so overwrite avgBuffer */
		for (i=0; i<CCDSize; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e00b      	b.n	80006ec <main+0x218>
			avgBuffer[i] = aTxBuffer[i];
 80006d4:	4a39      	ldr	r2, [pc, #228]	; (80007bc <main+0x2e8>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006dc:	b299      	uxth	r1, r3
 80006de:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <main+0x2ec>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<CCDSize; i++)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f640 626d 	movw	r2, #3693	; 0xe6d
 80006f2:	4293      	cmp	r3, r2
 80006f4:	ddee      	ble.n	80006d4 <main+0x200>
		break;
 80006f6:	e091      	b.n	800081c <main+0x348>

	case 3:
		/* reset flags */
		data_flag = 0;
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <main+0x2dc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]

		/* Add new to previous integrations.
		   This loop takes 3-4ms to complete. */
		for (i=0; i<CCDSize; i++)
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e012      	b.n	800072a <main+0x256>
			avgBuffer[i] = avgBuffer[i] + aTxBuffer[i];
 8000704:	4a2e      	ldr	r2, [pc, #184]	; (80007c0 <main+0x2ec>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800070c:	b29a      	uxth	r2, r3
 800070e:	492b      	ldr	r1, [pc, #172]	; (80007bc <main+0x2e8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000716:	b29b      	uxth	r3, r3
 8000718:	4413      	add	r3, r2
 800071a:	b299      	uxth	r1, r3
 800071c:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <main+0x2ec>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<CCDSize; i++)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f640 626d 	movw	r2, #3693	; 0xe6d
 8000730:	4293      	cmp	r3, r2
 8000732:	dde7      	ble.n	8000704 <main+0x230>
		break;
 8000734:	e072      	b.n	800081c <main+0x348>

	case 4:
		/* reset flags */
		data_flag = 0;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <main+0x2dc>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

		/* Add new to previous integrations.
		   This loop takes 3-4ms to complete. */
		for (i=0; i<CCDSize; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e012      	b.n	8000768 <main+0x294>
			avgBuffer[i] = avgBuffer[i] + aTxBuffer[i];
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <main+0x2ec>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074a:	b29a      	uxth	r2, r3
 800074c:	491b      	ldr	r1, [pc, #108]	; (80007bc <main+0x2e8>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000754:	b29b      	uxth	r3, r3
 8000756:	4413      	add	r3, r2
 8000758:	b299      	uxth	r1, r3
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <main+0x2ec>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<CCDSize; i++)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f640 626d 	movw	r2, #3693	; 0xe6d
 800076e:	4293      	cmp	r3, r2
 8000770:	dde7      	ble.n	8000742 <main+0x26e>

		/* Store average values in aTxBuffer */
		for (i=0; i<CCDSize; i++)
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e038      	b.n	80007ea <main+0x316>
 8000778:	20003c38 	.word	0x20003c38
 800077c:	20003af0 	.word	0x20003af0
 8000780:	20003a6c 	.word	0x20003a6c
 8000784:	20003ab0 	.word	0x20003ab0
 8000788:	20000000 	.word	0x20000000
 800078c:	40010000 	.word	0x40010000
 8000790:	20000004 	.word	0x20000004
 8000794:	40000c00 	.word	0x40000c00
 8000798:	40000400 	.word	0x40000400
 800079c:	20001d0c 	.word	0x20001d0c
 80007a0:	20003cb8 	.word	0x20003cb8
 80007a4:	40020000 	.word	0x40020000
 80007a8:	20001d24 	.word	0x20001d24
 80007ac:	20001d18 	.word	0x20001d18
 80007b0:	20001d25 	.word	0x20001d25
 80007b4:	20001d2a 	.word	0x20001d2a
 80007b8:	20001d26 	.word	0x20001d26
 80007bc:	20003cf8 	.word	0x20003cf8
 80007c0:	20000030 	.word	0x20000030
			aTxBuffer[i] = avgBuffer[i]/avg_exps;
 80007c4:	4a16      	ldr	r2, [pc, #88]	; (8000820 <main+0x34c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <main+0x350>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80007da:	b299      	uxth	r1, r3
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <main+0x354>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i=0; i<CCDSize; i++)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3301      	adds	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f640 626d 	movw	r2, #3693	; 0xe6d
 80007f0:	4293      	cmp	r3, r2
 80007f2:	dde7      	ble.n	80007c4 <main+0x2f0>

		if (coll_mode == 1){
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <main+0x358>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d107      	bne.n	800080e <main+0x33a>
			exps_left = avg_exps;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <main+0x350>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <main+0x35c>)
 8000806:	701a      	strb	r2, [r3, #0]
			pulse_counter=6;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <main+0x360>)
 800080a:	2206      	movs	r2, #6
 800080c:	701a      	strb	r2, [r3, #0]
		}

		/* Transmit data in aTxBuffer */
		//UART2_Tx_DMA();
		HAL_UART_Transmit_DMA(&huart2, aTxBuffer, CCDSize*sizeof(uint16_t));
 800080e:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <main+0x354>)
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <main+0x364>)
 8000816:	f004 f825 	bl	8004864 <HAL_UART_Transmit_DMA>
		break;
 800081a:	bf00      	nop
	if (change_exposure_flag == 1)
 800081c:	e6db      	b.n	80005d6 <main+0x102>
 800081e:	bf00      	nop
 8000820:	20000030 	.word	0x20000030
 8000824:	20001d28 	.word	0x20001d28
 8000828:	20003cf8 	.word	0x20003cf8
 800082c:	20001d2a 	.word	0x20001d2a
 8000830:	20001d29 	.word	0x20001d29
 8000834:	20001d26 	.word	0x20001d26
 8000838:	20003cb8 	.word	0x20003cb8

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 ffb8 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b29      	ldr	r3, [pc, #164]	; (800090c <SystemClock_Config+0xd0>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a28      	ldr	r2, [pc, #160]	; (800090c <SystemClock_Config+0xd0>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <SystemClock_Config+0xd0>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemClock_Config+0xd4>)
 800088a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0xd4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b0:	2308      	movs	r3, #8
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 288;
 80008b4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ba:	2304      	movs	r3, #4
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008be:	2307      	movs	r3, #7
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fc70 	bl	80031ac <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d2:	f000 fd3d 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	230f      	movs	r3, #15
 80008d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2102      	movs	r1, #2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 feca 	bl	800368c <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008fe:	f000 fd27 	bl	8001350 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	; 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2102      	movs	r1, #2
 800091c:	2010      	movs	r0, #16
 800091e:	f001 fe72 	bl	8002606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000922:	2010      	movs	r0, #16
 8000924:	f001 fe8b 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	2038      	movs	r0, #56	; 0x38
 800092e:	f001 fe6a 	bl	8002606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000932:	2038      	movs	r0, #56	; 0x38
 8000934:	f001 fe83 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2032      	movs	r0, #50	; 0x32
 800093e:	f001 fe62 	bl	8002606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000942:	2032      	movs	r0, #50	; 0x32
 8000944:	f001 fe7b 	bl	800263e <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095e:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000960:	4a22      	ldr	r2, [pc, #136]	; (80009ec <MX_ADC1_Init+0xa0>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_ADC1_Init+0x9c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000976:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000978:	2200      	movs	r2, #0
 800097a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_ADC1_Init+0x9c>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_ADC1_Init+0x9c>)
 800098e:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000992:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_ADC1_Init+0x9c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_ADC1_Init+0x9c>)
 800099c:	2201      	movs	r2, #1
 800099e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_ADC1_Init+0x9c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_ADC1_Init+0x9c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_ADC1_Init+0x9c>)
 80009b0:	f001 f938 	bl	8001c24 <HAL_ADC_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80009ba:	f000 fcc9 	bl	8001350 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009be:	230a      	movs	r3, #10
 80009c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_ADC1_Init+0x9c>)
 80009d0:	f001 fa9e 	bl	8001f10 <HAL_ADC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009da:	f000 fcb9 	bl	8001350 <Error_Handler>
  //ADC1->CR2 |= (uint32_t)ADC_CR2_DMA;
  //ADC1->CR2 |= (uint32_t)ADC_CR2_ADON;

  /* USER CODE END ADC1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20003b30 	.word	0x20003b30
 80009ec:	40012000 	.word	0x40012000

080009f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b092      	sub	sp, #72	; 0x48
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f004 fed0 	bl	80057c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a20:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a22:	4a39      	ldr	r2, [pc, #228]	; (8000b08 <MX_TIM1_Init+0x118>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = apb1_freq / CCD_fm - 1;
 8000a26:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <MX_TIM1_Init+0x11c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a39      	ldr	r2, [pc, #228]	; (8000b10 <MX_TIM1_Init+0x120>)
 8000a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a30:	14d2      	asrs	r2, r2, #19
 8000a32:	17db      	asrs	r3, r3, #31
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	3b01      	subs	r3, #1
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b32      	ldr	r3, [pc, #200]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = SH_period - 1;
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <MX_TIM1_Init+0x124>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a4c:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a60:	4828      	ldr	r0, [pc, #160]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a62:	f003 f805 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000a6c:	f000 fc70 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000a80:	f003 fdce 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a8a:	f000 fc61 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = (2 * CCD_fm) / 1000000;
 8000a92:	2304      	movs	r3, #4
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a96:	2302      	movs	r3, #2
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	2204      	movs	r2, #4
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000ab4:	f003 fa94 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000abe:	f000 fc47 	bl	8001350 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000ae6:	f003 fe09 	bl	80046fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000af0:	f000 fc2e 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM1_Init+0x114>)
 8000af6:	f000 fd4b 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3748      	adds	r7, #72	; 0x48
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20003c38 	.word	0x20003c38
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	20003aac 	.word	0x20003aac
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20000000 	.word	0x20000000

08000b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = apb1_freq / CCD_fm - 1;
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_TIM2_Init+0xc4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <MX_TIM2_Init+0xc8>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	14d2      	asrs	r2, r2, #19
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	3b01      	subs	r3, #1
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SH_period - 1;
 8000b60:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MX_TIM2_Init+0xcc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b68:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b78:	f002 ff7a 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b82:	f000 fbe5 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	4619      	mov	r1, r3
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000b96:	f003 fd43 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 fbd6 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	; 0x60
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (2 * CCD_fm) / 1000000;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000bbc:	f003 fa10 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bc6:	f000 fbc3 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM2_Init+0xc0>)
 8000bcc:	f000 fce0 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20003c78 	.word	0x20003c78
 8000bdc:	20003aac 	.word	0x20003aac
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20000000 	.word	0x20000000

08000be8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	615a      	str	r2, [r3, #20]
 8000c08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c0c:	4a29      	ldr	r2, [pc, #164]	; (8000cb4 <MX_TIM3_Init+0xcc>)
 8000c0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1 - 1;
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = apb1_freq / CCD_fm - 1;
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_TIM3_Init+0xd0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a26      	ldr	r2, [pc, #152]	; (8000cbc <MX_TIM3_Init+0xd4>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	14d2      	asrs	r2, r2, #19
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c40:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c42:	f002 ff15 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c4c:	f000 fb80 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c60:	f003 fcde 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c6a:	f000 fb71 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6e:	2360      	movs	r3, #96	; 0x60
 8000c70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = apb1_freq / (2*CCD_fm);
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_TIM3_Init+0xd0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <MX_TIM3_Init+0xd4>)
 8000c78:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7c:	1512      	asrs	r2, r2, #20
 8000c7e:	17db      	asrs	r3, r3, #31
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2208      	movs	r2, #8
 8000c90:	4619      	mov	r1, r3
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000c94:	f003 f9a4 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000c9e:	f000 fb57 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <MX_TIM3_Init+0xc8>)
 8000ca4:	f000 fc74 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20003af0 	.word	0x20003af0
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	20003aac 	.word	0x20003aac
 8000cbc:	431bde83 	.word	0x431bde83

08000cc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000ce4:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <MX_TIM4_Init+0xd0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1 - 1;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4 * apb1_freq / CCD_fm - 1;
 8000cf4:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <MX_TIM4_Init+0xd4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <MX_TIM4_Init+0xd8>)
 8000cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000d00:	14d2      	asrs	r2, r2, #19
 8000d02:	17db      	asrs	r3, r3, #31
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	3b01      	subs	r3, #1
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d16:	2280      	movs	r2, #128	; 0x80
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d1c:	f002 fea8 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f000 fb13 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	4619      	mov	r1, r3
 8000d38:	4814      	ldr	r0, [pc, #80]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d3a:	f003 fc71 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000d44:	f000 fb04 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	; 0x60
 8000d4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = apb1_freq / (2 * CCD_fm);
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_TIM4_Init+0xd4>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <MX_TIM4_Init+0xd8>)
 8000d52:	fb82 1203 	smull	r1, r2, r2, r3
 8000d56:	1512      	asrs	r2, r2, #20
 8000d58:	17db      	asrs	r3, r3, #31
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	220c      	movs	r2, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d6e:	f003 f937 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0xbc>
  {
    Error_Handler();
 8000d78:	f000 faea 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM4_Init+0xcc>)
 8000d7e:	f000 fc07 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20003a6c 	.word	0x20003a6c
 8000d90:	40000800 	.word	0x40000800
 8000d94:	20003aac 	.word	0x20003aac
 8000d98:	431bde83 	.word	0x431bde83

08000d9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <MX_TIM5_Init+0xc4>)
 8000dc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = apb1_freq / CCD_fm - 1;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_TIM5_Init+0xc8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <MX_TIM5_Init+0xcc>)
 8000dca:	fb82 1203 	smull	r1, r2, r2, r3
 8000dce:	14d2      	asrs	r2, r2, #19
 8000dd0:	17db      	asrs	r3, r3, #31
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = ICG_period - 1;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_TIM5_Init+0xd0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dea:	60d3      	str	r3, [r2, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000dfa:	f002 fe39 	bl	8003a70 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8000e04:	f000 faa4 	bl	8001350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000e18:	f003 fc02 	bl	8004620 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e22:	f000 fa95 	bl	8001350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (5 * CCD_fm) / 1000000;
 8000e2a:	230a      	movs	r3, #10
 8000e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000e3e:	f003 f8cf 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000e48:	f000 fa82 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xc0>)
 8000e4e:	f000 fb9f 	bl	8001590 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20003ab0 	.word	0x20003ab0
 8000e60:	40000c00 	.word	0x40000c00
 8000e64:	20003aac 	.word	0x20003aac
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	20000004 	.word	0x20000004

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000ea2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ea6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_USART2_UART_Init+0x4c>)
 8000eaa:	f003 fc8d 	bl	80047c8 <HAL_UART_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000eb4:	f000 fa4c 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20003cb8 	.word	0x20003cb8
 8000ec0:	40004400 	.word	0x40004400

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_DMA_Init+0x58>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_DMA_Init+0x58>)
 8000ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_DMA_Init+0x58>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA_Init+0x58>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <MX_DMA_Init+0x58>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_DMA_Init+0x58>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2011      	movs	r0, #17
 8000f08:	f001 fb7d 	bl	8002606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f0c:	2011      	movs	r0, #17
 8000f0e:	f001 fb96 	bl	800263e <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a38      	ldr	r2, [pc, #224]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a2a      	ldr	r2, [pc, #168]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_GPIO_Init+0x100>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2132      	movs	r1, #50	; 0x32
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <MX_GPIO_Init+0x104>)
 8000fac:	f002 f8e4 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_GPIO_Init+0x108>)
 8000fb6:	f002 f8df 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	481b      	ldr	r0, [pc, #108]	; (800102c <MX_GPIO_Init+0x10c>)
 8000fc0:	f002 f8da 	bl	8003178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fc4:	2332      	movs	r3, #50	; 0x32
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4812      	ldr	r0, [pc, #72]	; (8001024 <MX_GPIO_Init+0x104>)
 8000fdc:	f001 ff4a 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_GPIO_Init+0x108>)
 8000ff8:	f001 ff3c 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001004:	2302      	movs	r3, #2
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_GPIO_Init+0x10c>)
 8001014:	f001 ff2e 	bl	8002e74 <HAL_GPIO_Init>

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020800 	.word	0x40020800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400

08001030 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <get_Timer_clocks>:

void get_Timer_clocks(void)
{
 8001044:	b4b0      	push	{r4, r5, r7}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af00      	add	r7, sp, #0
	/* Get the apb-prescalers */
	int apb1 = (RCC->CFGR & RCC_CFGR_PPRE1) >> 10;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <get_Timer_clocks+0x9c>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0a9b      	lsrs	r3, r3, #10
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	627b      	str	r3, [r7, #36]	; 0x24

	/* APBx prescaler table */
	int apb2x[8] = {1,0,0,0,2,4,8,16};
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <get_Timer_clocks+0xa0>)
 8001058:	1d3c      	adds	r4, r7, #4
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Calculate the timer clocks */
	apb1_freq = SystemCoreClock / (apb2x[apb1]*(apb2x[apb1]==1) + apb2x[apb1]/2*(apb2x[apb1]!=1));
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <get_Timer_clocks+0xa4>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001074:	440b      	add	r3, r1
 8001076:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001082:	4403      	add	r3, r0
 8001084:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001088:	2b01      	cmp	r3, #1
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2db      	uxtb	r3, r3
 8001092:	fb03 f101 	mul.w	r1, r3, r1
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800109e:	4403      	add	r3, r0
 80010a0:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80010a4:	0fd8      	lsrs	r0, r3, #31
 80010a6:	4403      	add	r3, r0
 80010a8:	105b      	asrs	r3, r3, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010b4:	4423      	add	r3, r4
 80010b6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	fb03 f300 	mul.w	r3, r3, r0
 80010c8:	440b      	add	r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <get_Timer_clocks+0xa8>)
 80010d2:	601a      	str	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	372c      	adds	r7, #44	; 0x2c
 80010d8:	46bd      	mov	sp, r7
 80010da:	bcb0      	pop	{r4, r5, r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	080057e8 	.word	0x080057e8
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20003aac 	.word	0x20003aac

080010f0 <flush_CCD>:

void flush_CCD(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* Set exposure very low */
	ICG_period = 15000;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <flush_CCD+0x70>)
 80010f6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80010fa:	601a      	str	r2, [r3, #0]
	SH_period = 20;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <flush_CCD+0x74>)
 80010fe:	2214      	movs	r2, #20
 8001100:	601a      	str	r2, [r3, #0]

	/*	Disable ICG (TIM5) and SH (TIM2) before reconfiguring*/
//	TIM_Cmd(TIM2, DISABLE);
//	TIM_Cmd(TIM5, DISABLE);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001102:	2104      	movs	r1, #4
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <flush_CCD+0x78>)
 8001106:	f002 fd11 	bl	8003b2c <HAL_TIM_PWM_Stop>
	//HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <flush_CCD+0x7c>)
 800110e:	f002 fd0d 	bl	8003b2c <HAL_TIM_PWM_Stop>

	/*	Reset flags and counters */
	CCD_flushed = 0;
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <flush_CCD+0x80>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	pulse_counter = 0;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <flush_CCD+0x84>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

	/* 	Reconfigure TIM2 and TIM5 */
//	TIM_ICG_SH_conf();

	MX_TIM1_Init();
 800111e:	f7ff fc67 	bl	80009f0 <MX_TIM1_Init>
	//MX_TIM2_Init();
	MX_TIM5_Init();
 8001122:	f7ff fe3b 	bl	8000d9c <MX_TIM5_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001126:	2104      	movs	r1, #4
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <flush_CCD+0x78>)
 800112a:	f002 fccd 	bl	8003ac8 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 800112e:	2100      	movs	r1, #0
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <flush_CCD+0x7c>)
 8001132:	f002 fd47 	bl	8003bc4 <HAL_TIM_PWM_Start_IT>
  /*	Set counters close to expiration, as the integration times may be very long.
	(For example: with an ICG-period of 300s we'd have to wait 600s for two ICG-
	pulses if we don't cut the first one short.)
	The SH-period is slightly delayed to comply with the CCD's timing requirements. */
	//TIM2->CNT = SH_period - SH_delay;// + (SH_period % 2);
	TIM1->CNT = SH_period - SH_delay;// + (SH_period % 2);
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <flush_CCD+0x74>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a0f      	ldr	r2, [pc, #60]	; (8001178 <flush_CCD+0x88>)
 800113c:	3b0c      	subs	r3, #12
 800113e:	6253      	str	r3, [r2, #36]	; 0x24
	TIM5->CNT = ICG_period - ICG_delay;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <flush_CCD+0x70>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <flush_CCD+0x8c>)
 8001146:	3b0b      	subs	r3, #11
 8001148:	6253      	str	r3, [r2, #36]	; 0x24
	TIM3->CNT = fm_delay;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <flush_CCD+0x90>)
 800114c:	2203      	movs	r2, #3
 800114e:	625a      	str	r2, [r3, #36]	; 0x24

	/*	Block until CCD is properly flushed */
	while(CCD_flushed == 0);
 8001150:	bf00      	nop
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <flush_CCD+0x80>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0fa      	beq.n	8001152 <flush_CCD+0x62>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000004 	.word	0x20000004
 8001164:	20000000 	.word	0x20000000
 8001168:	20003c38 	.word	0x20003c38
 800116c:	20003ab0 	.word	0x20003ab0
 8001170:	20001d27 	.word	0x20001d27
 8001174:	20001d26 	.word	0x20001d26
 8001178:	40010000 	.word	0x40010000
 800117c:	40000c00 	.word	0x40000c00
 8001180:	40000400 	.word	0x40000400

08001184 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	/* Wait a short while - to let DMA finish ..or something */
	HAL_Delay(50);
 800118c:	2032      	movs	r0, #50	; 0x32
 800118e:	f000 fd27 	bl	8001be0 <HAL_Delay>

	sort_aRxBuffer();
 8001192:	f000 f867 	bl	8001264 <sort_aRxBuffer>

	if ((nRxBuffer[0]==69)&&(nRxBuffer[1]==82))
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b45      	cmp	r3, #69	; 0x45
 800119e:	d12c      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x76>
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b52      	cmp	r3, #82	; 0x52
 80011a8:	d127      	bne.n	80011fa <HAL_UART_RxCpltCallback+0x76>
	{
		/* reset the key */
		nRxBuffer[0] = 0;
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		nRxBuffer[1] = 0;
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	705a      	strb	r2, [r3, #1]

		/* set flags for main-loop */
		change_exposure_flag = 1;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_UART_RxCpltCallback+0xa8>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
		data_flag = 0;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_UART_RxCpltCallback+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]

		/* disable averaging by default */
		avg_exps = 1;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_RxCpltCallback+0xb0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]

		/* continous or one-shot mode? */
		coll_mode = nRxBuffer[10];
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_UART_RxCpltCallback+0xb4>)
 80011d0:	701a      	strb	r2, [r3, #0]

		/* check if user averaging-request is valid */
		if ((nRxBuffer[11]<16)&&(nRxBuffer[11]>0))
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011d4:	7adb      	ldrb	r3, [r3, #11]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d809      	bhi.n	80011f0 <HAL_UART_RxCpltCallback+0x6c>
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011de:	7adb      	ldrb	r3, [r3, #11]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_UART_RxCpltCallback+0x6c>
			avg_exps = nRxBuffer[11];
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_UART_RxCpltCallback+0xa4>)
 80011e8:	7adb      	ldrb	r3, [r3, #11]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_UART_RxCpltCallback+0xb0>)
 80011ee:	701a      	strb	r2, [r3, #0]

		exps_left = avg_exps;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_UART_RxCpltCallback+0xb0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_UART_RxCpltCallback+0xb8>)
 80011f8:	701a      	strb	r2, [r3, #0]
	}

	if (start_flag == 0) {
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_UART_RxCpltCallback+0xbc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10e      	bne.n	8001220 <HAL_UART_RxCpltCallback+0x9c>
		if (HAL_ADC_Start_DMA(&hadc1, aTxBuffer, CCDSize*sizeof(uint16_t)) == HAL_OK) {
 8001202:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 8001206:	490f      	ldr	r1, [pc, #60]	; (8001244 <HAL_UART_RxCpltCallback+0xc0>)
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <HAL_UART_RxCpltCallback+0xc4>)
 800120a:	f000 fd4f 	bl	8001cac <HAL_ADC_Start_DMA>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_UART_RxCpltCallback+0x9c>
			GPIOA->ODR ^= GPIO_PIN_5;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_UART_RxCpltCallback+0xc8>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_UART_RxCpltCallback+0xc8>)
 800121a:	f083 0320 	eor.w	r3, r3, #32
 800121e:	6153      	str	r3, [r2, #20]
			//HAL_UART_Transmit_DMA(&huart2, aRxBuffer, RxDataSize*sizeof(uint8_t));
		}
	}
	//HAL_UART_Transmit_DMA(&huart2, aTxBuffer, 2*CCDSize);
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20001d18 	.word	0x20001d18
 800122c:	20001d24 	.word	0x20001d24
 8001230:	20001d25 	.word	0x20001d25
 8001234:	20001d28 	.word	0x20001d28
 8001238:	20001d2a 	.word	0x20001d2a
 800123c:	20001d29 	.word	0x20001d29
 8001240:	20001d2c 	.word	0x20001d2c
 8001244:	20003cf8 	.word	0x20003cf8
 8001248:	20003b30 	.word	0x20003b30
 800124c:	40020000 	.word	0x40020000

08001250 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <sort_aRxBuffer>:

void sort_aRxBuffer()
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
	int shift = -1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	607b      	str	r3, [r7, #4]
	int i = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]

	/* Examine for byte-shifts in aRxBuffer */
	for (i = 0; i < RxDataSize; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	e012      	b.n	80012a0 <sort_aRxBuffer+0x3c>
	{
		if ((aRxBuffer[i]==69)&&(aRxBuffer[i+1]==82))
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <sort_aRxBuffer+0xe4>)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	4413      	add	r3, r2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b45      	cmp	r3, #69	; 0x45
 8001286:	d108      	bne.n	800129a <sort_aRxBuffer+0x36>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <sort_aRxBuffer+0xe4>)
 800128e:	5cd3      	ldrb	r3, [r2, r3]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b52      	cmp	r3, #82	; 0x52
 8001294:	d101      	bne.n	800129a <sort_aRxBuffer+0x36>
			shift = i;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	607b      	str	r3, [r7, #4]
	for (i = 0; i < RxDataSize; i++)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b0b      	cmp	r3, #11
 80012a4:	dde9      	ble.n	800127a <sort_aRxBuffer+0x16>
	}
	if ((aRxBuffer[RxDataSize-1]==69)&&(aRxBuffer[0]==82))
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <sort_aRxBuffer+0xe4>)
 80012a8:	7adb      	ldrb	r3, [r3, #11]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b45      	cmp	r3, #69	; 0x45
 80012ae:	d106      	bne.n	80012be <sort_aRxBuffer+0x5a>
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <sort_aRxBuffer+0xe4>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b52      	cmp	r3, #82	; 0x52
 80012b8:	d101      	bne.n	80012be <sort_aRxBuffer+0x5a>
			shift = RxDataSize-1;
 80012ba:	230b      	movs	r3, #11
 80012bc:	607b      	str	r3, [r7, #4]

	/* If necessary permutate data */
	if (shift != -1){
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d02c      	beq.n	8001320 <sort_aRxBuffer+0xbc>
		for (i = 0; i < RxDataSize - shift; i++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	e00d      	b.n	80012e8 <sort_aRxBuffer+0x84>
			nRxBuffer[i] = aRxBuffer[shift+i];
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <sort_aRxBuffer+0xe4>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	b2d9      	uxtb	r1, r3
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <sort_aRxBuffer+0xe8>)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	460a      	mov	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < RxDataSize - shift; i++)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f1c3 030c 	rsb	r3, r3, #12
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbeb      	blt.n	80012cc <sort_aRxBuffer+0x68>
		for (i = 0; i < shift; i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	e00e      	b.n	8001318 <sort_aRxBuffer+0xb4>
			nRxBuffer[RxDataSize-shift+i] = aRxBuffer[i];
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1c3 020c 	rsb	r2, r3, #12
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4413      	add	r3, r2
 8001304:	4910      	ldr	r1, [pc, #64]	; (8001348 <sort_aRxBuffer+0xe4>)
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	440a      	add	r2, r1
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <sort_aRxBuffer+0xe8>)
 8001310:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < shift; i++)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbec      	blt.n	80012fa <sort_aRxBuffer+0x96>
	}

	/* Clear aRxBuffer */
	for (i = 0; i < RxDataSize; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	e007      	b.n	8001336 <sort_aRxBuffer+0xd2>
	{
		aRxBuffer[i] = 0;
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <sort_aRxBuffer+0xe4>)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < RxDataSize; i++)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2b0b      	cmp	r3, #11
 800133a:	ddf4      	ble.n	8001326 <sort_aRxBuffer+0xc2>
	}

}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	20001d0c 	.word	0x20001d0c
 800134c:	20001d18 	.word	0x20001d18

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800139e:	2005      	movs	r0, #5
 80013a0:	f001 f926 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	; 0x28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a2f      	ldr	r2, [pc, #188]	; (800148c <HAL_ADC_MspInit+0xdc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d158      	bne.n	8001484 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a26      	ldr	r2, [pc, #152]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_ADC_MspInit+0xe0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = CCD_Output_Pin;
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140e:	2303      	movs	r3, #3
 8001410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CCD_Output_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <HAL_ADC_MspInit+0xe4>)
 800141e:	f001 fd29 	bl	8002e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001424:	4a1d      	ldr	r2, [pc, #116]	; (800149c <HAL_ADC_MspInit+0xec>)
 8001426:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001448:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800144c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001450:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001458:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800145c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001460:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800146a:	f001 f903 	bl	8002674 <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001474:	f7ff ff6c 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
 800147e:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_ADC_MspInit+0xe8>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	; 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40012000 	.word	0x40012000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	20003bd8 	.word	0x20003bd8
 800149c:	40026410 	.word	0x40026410

080014a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a33      	ldr	r2, [pc, #204]	; (800157c <HAL_TIM_PWM_MspInit+0xdc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10e      	bne.n	80014d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80014ce:	e04e      	b.n	800156e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d10e      	bne.n	80014f8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a27      	ldr	r2, [pc, #156]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
}
 80014f6:	e03a      	b.n	800156e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM3)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_TIM_PWM_MspInit+0xe4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10e      	bne.n	8001520 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
}
 800151e:	e026      	b.n	800156e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a18      	ldr	r2, [pc, #96]	; (8001588 <HAL_TIM_PWM_MspInit+0xe8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10e      	bne.n	8001548 <HAL_TIM_PWM_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
}
 8001546:	e012      	b.n	800156e <HAL_TIM_PWM_MspInit+0xce>
  else if(htim_pwm->Instance==TIM5)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0f      	ldr	r2, [pc, #60]	; (800158c <HAL_TIM_PWM_MspInit+0xec>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10d      	bne.n	800156e <HAL_TIM_PWM_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_PWM_MspInit+0xe0>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
}
 800156e:	bf00      	nop
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40010000 	.word	0x40010000
 8001580:	40023800 	.word	0x40023800
 8001584:	40000400 	.word	0x40000400
 8001588:	40000800 	.word	0x40000800
 800158c:	40000c00 	.word	0x40000c00

08001590 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08c      	sub	sp, #48	; 0x30
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a5b      	ldr	r2, [pc, #364]	; (800171c <HAL_TIM_MspPostInit+0x18c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11f      	bne.n	80015f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a59      	ldr	r2, [pc, #356]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b57      	ldr	r3, [pc, #348]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	484e      	ldr	r0, [pc, #312]	; (8001724 <HAL_TIM_MspPostInit+0x194>)
 80015ec:	f001 fc42 	bl	8002e74 <HAL_GPIO_Init>
    //TIM5->DIER |= TIM_FLAG_Update;

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80015f0:	e08f      	b.n	8001712 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015fa:	d11e      	bne.n	800163a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SH_Pin;
 8001618:	2308      	movs	r3, #8
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001620:	2301      	movs	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001628:	2301      	movs	r3, #1
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SH_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	483d      	ldr	r0, [pc, #244]	; (8001728 <HAL_TIM_MspPostInit+0x198>)
 8001634:	f001 fc1e 	bl	8002e74 <HAL_GPIO_Init>
}
 8001638:	e06b      	b.n	8001712 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a3b      	ldr	r2, [pc, #236]	; (800172c <HAL_TIM_MspPostInit+0x19c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d11e      	bne.n	8001682 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a34      	ldr	r2, [pc, #208]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001668:	2301      	movs	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001670:	2302      	movs	r3, #2
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	482b      	ldr	r0, [pc, #172]	; (8001728 <HAL_TIM_MspPostInit+0x198>)
 800167c:	f001 fbfa 	bl	8002e74 <HAL_GPIO_Init>
}
 8001680:	e047      	b.n	8001712 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a2a      	ldr	r2, [pc, #168]	; (8001730 <HAL_TIM_MspPostInit+0x1a0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d11f      	bne.n	80016cc <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016b2:	2302      	movs	r3, #2
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_TIM_MspPostInit+0x198>)
 80016c6:	f001 fbd5 	bl	8002e74 <HAL_GPIO_Init>
}
 80016ca:	e022      	b.n	8001712 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_TIM_MspPostInit+0x1a4>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d11d      	bne.n	8001712 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_TIM_MspPostInit+0x190>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ICG_Pin;
 80016f2:	2301      	movs	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001702:	2302      	movs	r3, #2
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ICG_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_TIM_MspPostInit+0x194>)
 800170e:	f001 fbb1 	bl	8002e74 <HAL_GPIO_Init>
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40010000 	.word	0x40010000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40020400 	.word	0x40020400
 800172c:	40000400 	.word	0x40000400
 8001730:	40000800 	.word	0x40000800
 8001734:	40000c00 	.word	0x40000c00

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a4d      	ldr	r2, [pc, #308]	; (800188c <HAL_UART_MspInit+0x154>)
 8001756:	4293      	cmp	r3, r2
 8001758:	f040 8093 	bne.w	8001882 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_UART_MspInit+0x158>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a4a      	ldr	r2, [pc, #296]	; (8001890 <HAL_UART_MspInit+0x158>)
 8001766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_UART_MspInit+0x158>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_UART_MspInit+0x158>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	4a43      	ldr	r2, [pc, #268]	; (8001890 <HAL_UART_MspInit+0x158>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6313      	str	r3, [r2, #48]	; 0x30
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_UART_MspInit+0x158>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001794:	230c      	movs	r3, #12
 8001796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017a0:	2301      	movs	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a4:	2307      	movs	r3, #7
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4839      	ldr	r0, [pc, #228]	; (8001894 <HAL_UART_MspInit+0x15c>)
 80017b0:	f001 fb60 	bl	8002e74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017b4:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017b6:	4a39      	ldr	r2, [pc, #228]	; (800189c <HAL_UART_MspInit+0x164>)
 80017b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017ba:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017c4:	2240      	movs	r2, #64	; 0x40
 80017c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80017e2:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80017f6:	4828      	ldr	r0, [pc, #160]	; (8001898 <HAL_UART_MspInit+0x160>)
 80017f8:	f000 ff3c 	bl	8002674 <HAL_DMA_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001802:	f7ff fda5 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a23      	ldr	r2, [pc, #140]	; (8001898 <HAL_UART_MspInit+0x160>)
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_UART_MspInit+0x160>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_UART_MspInit+0x16c>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800181a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800182e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001832:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001834:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183a:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001846:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800184a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001856:	4812      	ldr	r0, [pc, #72]	; (80018a0 <HAL_UART_MspInit+0x168>)
 8001858:	f000 ff0c 	bl	8002674 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001862:	f7ff fd75 	bl	8001350 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <HAL_UART_MspInit+0x168>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2026      	movs	r0, #38	; 0x26
 8001878:	f000 fec5 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800187c:	2026      	movs	r0, #38	; 0x26
 800187e:	f000 fede 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40004400 	.word	0x40004400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	20003b78 	.word	0x20003b78
 800189c:	400260a0 	.word	0x400260a0
 80018a0:	20003a0c 	.word	0x20003a0c
 80018a4:	40026088 	.word	0x40026088

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fc:	f000 f950 	bl	8001ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream5_IRQHandler+0x10>)
 800190a:	f001 f84b 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20003a0c 	.word	0x20003a0c

08001918 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA1_Stream6_IRQHandler+0x10>)
 800191e:	f001 f841 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20003b78 	.word	0x20003b78

0800192c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <USART2_IRQHandler+0x10>)
 8001932:	f003 f883 	bl	8004a3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20003cb8 	.word	0x20003cb8

08001940 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if (pulse_counter == 6)
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <TIM5_IRQHandler+0x68>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b06      	cmp	r3, #6
 800194c:	d10a      	bne.n	8001964 <TIM5_IRQHandler+0x24>
	{
		/* Restart TIM4 as this gets the ADC running again */
		//TIM4->CR1 |= TIM_CR1_CEN;
		//GPIOA->ODR ^= GPIO_Pin_5;
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800194e:	210c      	movs	r1, #12
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <TIM5_IRQHandler+0x6c>)
 8001952:	f002 f8b9 	bl	8003ac8 <HAL_TIM_PWM_Start>
		HAL_ADC_Start_DMA(&hadc1, aTxBuffer, CCDSize*sizeof(uint16_t));
 8001956:	f641 42dc 	movw	r2, #7388	; 0x1cdc
 800195a:	4915      	ldr	r1, [pc, #84]	; (80019b0 <TIM5_IRQHandler+0x70>)
 800195c:	4815      	ldr	r0, [pc, #84]	; (80019b4 <TIM5_IRQHandler+0x74>)
 800195e:	f000 f9a5 	bl	8001cac <HAL_ADC_Start_DMA>
 8001962:	e007      	b.n	8001974 <TIM5_IRQHandler+0x34>
	}
	else if (pulse_counter == 3)
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <TIM5_IRQHandler+0x68>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b03      	cmp	r3, #3
 800196c:	d102      	bne.n	8001974 <TIM5_IRQHandler+0x34>
	{
		CCD_flushed = 1;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <TIM5_IRQHandler+0x78>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
	}

	pulse_counter++;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <TIM5_IRQHandler+0x68>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <TIM5_IRQHandler+0x68>)
 8001980:	701a      	strb	r2, [r3, #0]

	/* prevent overflow */
	if (pulse_counter > 32)
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <TIM5_IRQHandler+0x68>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b20      	cmp	r3, #32
 800198a:	d902      	bls.n	8001992 <TIM5_IRQHandler+0x52>
		pulse_counter = 32;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <TIM5_IRQHandler+0x68>)
 800198e:	2220      	movs	r2, #32
 8001990:	701a      	strb	r2, [r3, #0]

	/* Flash the led to the beat of ICG */
	GPIOA->ODR ^= GPIO_PIN_5;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <TIM5_IRQHandler+0x7c>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <TIM5_IRQHandler+0x7c>)
 8001998:	f083 0320 	eor.w	r3, r3, #32
 800199c:	6153      	str	r3, [r2, #20]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <TIM5_IRQHandler+0x80>)
 80019a0:	f002 fa16 	bl	8003dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20001d26 	.word	0x20001d26
 80019ac:	20003a6c 	.word	0x20003a6c
 80019b0:	20003cf8 	.word	0x20003cf8
 80019b4:	20003b30 	.word	0x20003b30
 80019b8:	20001d27 	.word	0x20001d27
 80019bc:	40020000 	.word	0x40020000
 80019c0:	20003ab0 	.word	0x20003ab0

080019c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	/* Stop TIM4 and thus the ADC */
			//TIM4->CR1 &= (uint16_t)~TIM_CR1_CEN;
			HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80019c8:	210c      	movs	r1, #12
 80019ca:	4825      	ldr	r0, [pc, #148]	; (8001a60 <DMA2_Stream0_IRQHandler+0x9c>)
 80019cc:	f002 f8ae 	bl	8003b2c <HAL_TIM_PWM_Stop>
			HAL_ADC_Stop_DMA(&hadc1);
 80019d0:	4824      	ldr	r0, [pc, #144]	; (8001a64 <DMA2_Stream0_IRQHandler+0xa0>)
 80019d2:	f000 fa3f 	bl	8001e54 <HAL_ADC_Stop_DMA>

			/* Keep track of the number of integrations performed */
			/* Are we collecting just once? */
			if (avg_exps == 1)
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <DMA2_Stream0_IRQHandler+0xa4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d103      	bne.n	80019e8 <DMA2_Stream0_IRQHandler+0x24>
			{
				/* Set the data_flag to transmit */
				data_flag = 1;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <DMA2_Stream0_IRQHandler+0xa8>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e036      	b.n	8001a56 <DMA2_Stream0_IRQHandler+0x92>
			}
			else if (avg_exps > 1)
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <DMA2_Stream0_IRQHandler+0xa4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d931      	bls.n	8001a56 <DMA2_Stream0_IRQHandler+0x92>
			{
				/* Is this the first collection of several? */
				if (exps_left == avg_exps)
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <DMA2_Stream0_IRQHandler+0xa4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d106      	bne.n	8001a10 <DMA2_Stream0_IRQHandler+0x4c>
				{
	//				exps_left--;
					/* Set the pulse counter to 6 to start the ADC again
					   at next ICG-pulse. */
					pulse_counter = 6;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <DMA2_Stream0_IRQHandler+0xb0>)
 8001a04:	2206      	movs	r2, #6
 8001a06:	701a      	strb	r2, [r3, #0]
					/* Set the data_flag to overwrite avgBuffer */
					data_flag = 2;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <DMA2_Stream0_IRQHandler+0xa8>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e01b      	b.n	8001a48 <DMA2_Stream0_IRQHandler+0x84>
				}

				/* Is this a collection in the middle? */
				else if ((exps_left < avg_exps)&&(exps_left > 1))
 8001a10:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <DMA2_Stream0_IRQHandler+0xa4>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d20b      	bcs.n	8001a38 <DMA2_Stream0_IRQHandler+0x74>
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d906      	bls.n	8001a38 <DMA2_Stream0_IRQHandler+0x74>
				{
	//				exps_left--;
					/* Set the pulse counter to 6 to start the ADC again
					   at next ICG-pulse. */
					pulse_counter = 6;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <DMA2_Stream0_IRQHandler+0xb0>)
 8001a2c:	2206      	movs	r2, #6
 8001a2e:	701a      	strb	r2, [r3, #0]
					/* Set the data_flag to sum integrations */
					data_flag = 3;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <DMA2_Stream0_IRQHandler+0xa8>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	e007      	b.n	8001a48 <DMA2_Stream0_IRQHandler+0x84>
				}

				/* Is this the last collection of several? */
				else if (exps_left == 1)
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d102      	bne.n	8001a48 <DMA2_Stream0_IRQHandler+0x84>
				{
	//				exps_left--;
					/* Set the data_flag to average integrations and tx */
					data_flag = 4;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <DMA2_Stream0_IRQHandler+0xa8>)
 8001a44:	2204      	movs	r2, #4
 8001a46:	701a      	strb	r2, [r3, #0]
				}
				exps_left--;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <DMA2_Stream0_IRQHandler+0xac>)
 8001a54:	701a      	strb	r2, [r3, #0]
			}

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a56:	4808      	ldr	r0, [pc, #32]	; (8001a78 <DMA2_Stream0_IRQHandler+0xb4>)
 8001a58:	f000 ffa4 	bl	80029a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20003a6c 	.word	0x20003a6c
 8001a64:	20003b30 	.word	0x20003b30
 8001a68:	20001d28 	.word	0x20001d28
 8001a6c:	20001d25 	.word	0x20001d25
 8001a70:	20001d29 	.word	0x20001d29
 8001a74:	20001d26 	.word	0x20001d26
 8001a78:	20003bd8 	.word	0x20003bd8

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <SystemInit+0x28>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <SystemInit+0x28>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SystemInit+0x28>)
 8001a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a96:	609a      	str	r2, [r3, #8]
#endif
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001aae:	e003      	b.n	8001ab8 <LoopCopyDataInit>

08001ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ab6:	3104      	adds	r1, #4

08001ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ac0:	d3f6      	bcc.n	8001ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	; (8001af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac4:	e002      	b.n	8001acc <LoopFillZerobss>

08001ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ac8:	f842 3b04 	str.w	r3, [r2], #4

08001acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ad0:	d3f9      	bcc.n	8001ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ad2:	f7ff ffd3 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f003 fe4f 	bl	8005778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ada:	f7fe fcfb 	bl	80004d4 <main>
  bx  lr    
 8001ade:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ae4:	08005838 	.word	0x08005838
  ldr  r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001aec:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001af0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8001af4:	200059d8 	.word	0x200059d8

08001af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_Init+0x40>)
 8001b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <HAL_Init+0x40>)
 8001b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_Init+0x40>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 fd63 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 f808 	bl	8001b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b30:	f7ff fc16 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023c00 	.word	0x40023c00

08001b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_InitTick+0x54>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x58>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	4619      	mov	r1, r3
 8001b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fd7b 	bl	800265a <HAL_SYSTICK_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00e      	b.n	8001b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d80a      	bhi.n	8001b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	f000 fd43 	bl	8002606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b80:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <HAL_InitTick+0x5c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000008 	.word	0x20000008
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	2000000c 	.word	0x2000000c

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000010 	.word	0x20000010
 8001bc4:	200059d4 	.word	0x200059d4

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200059d4 	.word	0x200059d4

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff ffee 	bl	8001bc8 <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_Delay+0x40>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffde 	bl	8001bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000010 	.word	0x20000010

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e033      	b.n	8001ca2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fbb4 	bl	80013b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c6a:	f023 0302 	bic.w	r3, r3, #2
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fa6c 	bl	8002154 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
 8001c92:	e001      	b.n	8001c98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_Start_DMA+0x1e>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0b1      	b.n	8001e2e <HAL_ADC_Start_DMA+0x182>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d018      	beq.n	8001d12 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_ADC_Start_DMA+0x18c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a51      	ldr	r2, [pc, #324]	; (8001e3c <HAL_ADC_Start_DMA+0x190>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9a      	lsrs	r2, r3, #18
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	f040 8085 	bne.w	8001e2c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d60:	d106      	bne.n	8001d70 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f023 0206 	bic.w	r2, r3, #6
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d6e:	e002      	b.n	8001d76 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_ADC_Start_DMA+0x194>)
 8001d80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d86:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <HAL_ADC_Start_DMA+0x198>)
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_ADC_Start_DMA+0x19c>)
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	4a2d      	ldr	r2, [pc, #180]	; (8001e4c <HAL_ADC_Start_DMA+0x1a0>)
 8001d98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001db2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	334c      	adds	r3, #76	; 0x4c
 8001dce:	4619      	mov	r1, r3
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f000 fcfc 	bl	80027d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10f      	bne.n	8001e04 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11c      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	e013      	b.n	8001e2c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_ADC_Start_DMA+0x1a4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10e      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x180>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	40012300 	.word	0x40012300
 8001e44:	0800234d 	.word	0x0800234d
 8001e48:	08002407 	.word	0x08002407
 8001e4c:	08002423 	.word	0x08002423
 8001e50:	40012000 	.word	0x40012000

08001e54 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_Stop_DMA+0x1a>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e038      	b.n	8001ee0 <HAL_ADC_Stop_DMA+0x8c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d120      	bne.n	8001ed6 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fce9 	bl	8002880 <HAL_DMA_Abort>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001ec0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1c>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e105      	b.n	8002138 <HAL_ADC_ConfigChannel+0x228>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d925      	bls.n	8001f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68d9      	ldr	r1, [r3, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4403      	add	r3, r0
 8001f7a:	3b1e      	subs	r3, #30
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e022      	b.n	8001fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4403      	add	r3, r0
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d824      	bhi.n	8002020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b05      	subs	r3, #5
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b05      	subs	r3, #5
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
 800201e:	e04c      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d824      	bhi.n	8002072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	; 0x23
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43da      	mvns	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	400a      	ands	r2, r1
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b23      	subs	r3, #35	; 0x23
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
 8002070:	e023      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b41      	subs	r3, #65	; 0x41
 8002084:	221f      	movs	r2, #31
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	400a      	ands	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b41      	subs	r3, #65	; 0x41
 80020ae:	fa00 f203 	lsl.w	r2, r0, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_ADC_ConfigChannel+0x234>)
 80020bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_ADC_ConfigChannel+0x238>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1cc>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_ADC_ConfigChannel+0x238>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d123      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d003      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x1e6>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b11      	cmp	r3, #17
 80020f4:	d11b      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d111      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_ADC_ConfigChannel+0x23c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a10      	ldr	r2, [pc, #64]	; (8002150 <HAL_ADC_ConfigChannel+0x240>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9a      	lsrs	r2, r3, #18
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	40012000 	.word	0x40012000
 800214c:	20000008 	.word	0x20000008
 8002150:	431bde83 	.word	0x431bde83

08002154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215c:	4b79      	ldr	r3, [pc, #484]	; (8002344 <ADC_Init+0x1f0>)
 800215e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	021a      	lsls	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	4a58      	ldr	r2, [pc, #352]	; (8002348 <ADC_Init+0x1f4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e00f      	b.n	8002252 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0202 	bic.w	r2, r2, #2
 8002260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
 800226c:	005a      	lsls	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800228e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800229e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	3b01      	subs	r3, #1
 80022ac:	035a      	lsls	r2, r3, #13
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	e007      	b.n	80022c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	051a      	lsls	r2, r3, #20
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230a:	025a      	lsls	r2, r3, #9
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	029a      	lsls	r2, r3, #10
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40012300 	.word	0x40012300
 8002348:	0f000001 	.word	0x0f000001

0800234c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13c      	bne.n	80023e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12b      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002384:	2b00      	cmp	r3, #0
 8002386:	d127      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d119      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0220 	bic.w	r2, r2, #32
 80023b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7fe ff39 	bl	8001250 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023de:	e00e      	b.n	80023fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fd85 	bl	8001efc <HAL_ADC_ErrorCallback>
}
 80023f2:	e004      	b.n	80023fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff fd67 	bl	8001ee8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fd5a 	bl	8001efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff29 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff3e 	bl	8002498 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff8e 	bl	8002544 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5d 	bl	80024f0 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff31 	bl	80024b4 <__NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffa2 	bl	80025ac <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff faa2 	bl	8001bc8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e099      	b.n	80027c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	e00f      	b.n	80026d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b2:	f7ff fa89 	bl	8001bc8 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d908      	bls.n	80026d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e078      	b.n	80027c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e8      	bne.n	80026b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_DMA_Init+0x158>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	4313      	orrs	r3, r2
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b04      	cmp	r3, #4
 8002764:	d117      	bne.n	8002796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fb01 	bl	8002d80 <DMA_CheckFifoParam>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002792:	2301      	movs	r3, #1
 8002794:	e016      	b.n	80027c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fab8 	bl	8002d14 <DMA_CalcBaseAndBitshift>
 80027a4:	4603      	mov	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	223f      	movs	r2, #63	; 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	f010803f 	.word	0xf010803f

080027d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Start_IT+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e040      	b.n	8002878 <HAL_DMA_Start_IT+0xa8>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d12f      	bne.n	800286a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa4a 	bl	8002cb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0216 	orr.w	r2, r2, #22
 800283e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e005      	b.n	8002876 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800288e:	f7ff f99b 	bl	8001bc8 <HAL_GetTick>
 8002892:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e052      	b.n	8002958 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0216 	bic.w	r2, r2, #22
 80028c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <HAL_DMA_Abort+0x62>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0208 	bic.w	r2, r2, #8
 80028f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002902:	e013      	b.n	800292c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002904:	f7ff f960 	bl	8001bc8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b05      	cmp	r3, #5
 8002910:	d90c      	bls.n	800292c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e015      	b.n	8002958 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e4      	bne.n	8002904 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293e:	223f      	movs	r2, #63	; 0x3f
 8002940:	409a      	lsls	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00c      	b.n	8002998 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2205      	movs	r2, #5
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0201 	bic.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029b0:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_DMA_IRQHandler+0x258>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a92      	ldr	r2, [pc, #584]	; (8002c00 <HAL_DMA_IRQHandler+0x25c>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0a9b      	lsrs	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2208      	movs	r2, #8
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d01a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0204 	bic.w	r2, r2, #4
 80029f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	2208      	movs	r2, #8
 80029fe:	409a      	lsls	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a32:	2201      	movs	r2, #1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f043 0202 	orr.w	r2, r3, #2
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d012      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2204      	movs	r2, #4
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0204 	orr.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2210      	movs	r2, #16
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d043      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d03c      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d018      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d024      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e01f      	b.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	4798      	blx	r3
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0208 	bic.w	r2, r2, #8
 8002b02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2220      	movs	r2, #32
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 808e 	beq.w	8002c42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8086 	beq.w	8002c42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d136      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0216 	bic.w	r2, r2, #22
 8002b5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_DMA_IRQHandler+0x1da>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0208 	bic.w	r2, r2, #8
 8002b8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	223f      	movs	r2, #63	; 0x3f
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d07d      	beq.n	8002cae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
        }
        return;
 8002bba:	e078      	b.n	8002cae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d108      	bne.n	8002bea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d030      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e02b      	b.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d027      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
 8002bfa:	e022      	b.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d032      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d022      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d307      	bcc.n	8002c8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f2      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x2ca>
 8002c88:	e000      	b.n	8002c8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
 8002cac:	e000      	b.n	8002cb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cae:	bf00      	nop
    }
  }
}
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop

08002cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d108      	bne.n	8002cf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cf6:	e007      	b.n	8002d08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	60da      	str	r2, [r3, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3b10      	subs	r3, #16
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <DMA_CalcBaseAndBitshift+0x64>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <DMA_CalcBaseAndBitshift+0x68>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d909      	bls.n	8002d56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	1d1a      	adds	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	659a      	str	r2, [r3, #88]	; 0x58
 8002d54:	e007      	b.n	8002d66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	aaaaaaab 	.word	0xaaaaaaab
 8002d7c:	08005820 	.word	0x08005820

08002d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11f      	bne.n	8002dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d855      	bhi.n	8002e4c <DMA_CheckFifoParam+0xcc>
 8002da0:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <DMA_CheckFifoParam+0x28>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002db9 	.word	0x08002db9
 8002dac:	08002dcb 	.word	0x08002dcb
 8002db0:	08002db9 	.word	0x08002db9
 8002db4:	08002e4d 	.word	0x08002e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d045      	beq.n	8002e50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e042      	b.n	8002e50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dd2:	d13f      	bne.n	8002e54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e03c      	b.n	8002e54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d121      	bne.n	8002e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d836      	bhi.n	8002e58 <DMA_CheckFifoParam+0xd8>
 8002dea:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x70>)
 8002dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e07 	.word	0x08002e07
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e19 	.word	0x08002e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      break;
 8002e04:	e02f      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e16:	e021      	b.n	8002e5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e20:	d11e      	bne.n	8002e60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e26:	e01b      	b.n	8002e60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d902      	bls.n	8002e34 <DMA_CheckFifoParam+0xb4>
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d003      	beq.n	8002e3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e32:	e018      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	e015      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4a:	e00b      	b.n	8002e64 <DMA_CheckFifoParam+0xe4>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e00a      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e50:	bf00      	nop
 8002e52:	e008      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e54:	bf00      	nop
 8002e56:	e006      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e004      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <DMA_CheckFifoParam+0xe6>
      break;
 8002e64:	bf00      	nop
    }
  } 
  
  return status; 
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e159      	b.n	8003144 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8148 	bne.w	800313e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00b      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec2:	2b11      	cmp	r3, #17
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0xfc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a2 	beq.w	800313e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b56      	ldr	r3, [pc, #344]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a55      	ldr	r2, [pc, #340]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_GPIO_Init+0x2e4>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a51      	ldr	r2, [pc, #324]	; (800315c <HAL_GPIO_Init+0x2e8>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a48      	ldr	r2, [pc, #288]	; (8003160 <HAL_GPIO_Init+0x2ec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x202>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a47      	ldr	r2, [pc, #284]	; (8003164 <HAL_GPIO_Init+0x2f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x1fe>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_GPIO_Init+0x2f4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x1fa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a45      	ldr	r2, [pc, #276]	; (800316c <HAL_GPIO_Init+0x2f8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x1f6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_GPIO_Init+0x2fc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x1f2>
 8003062:	2304      	movs	r3, #4
 8003064:	e008      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003066:	2307      	movs	r3, #7
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306a:	2303      	movs	r3, #3
 800306c:	e004      	b.n	8003078 <HAL_GPIO_Init+0x204>
 800306e:	2302      	movs	r3, #2
 8003070:	e002      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x204>
 8003076:	2300      	movs	r3, #0
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	f002 0203 	and.w	r2, r2, #3
 800307e:	0092      	lsls	r2, r2, #2
 8003080:	4093      	lsls	r3, r2
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003088:	4934      	ldr	r1, [pc, #208]	; (800315c <HAL_GPIO_Init+0x2e8>)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	3302      	adds	r3, #2
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ba:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030c0:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ea:	4b22      	ldr	r3, [pc, #136]	; (8003174 <HAL_GPIO_Init+0x300>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_GPIO_Init+0x300>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003138:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_GPIO_Init+0x300>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3301      	adds	r3, #1
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b0f      	cmp	r3, #15
 8003148:	f67f aea2 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3724      	adds	r7, #36	; 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	40023800 	.word	0x40023800
 800315c:	40013800 	.word	0x40013800
 8003160:	40020000 	.word	0x40020000
 8003164:	40020400 	.word	0x40020400
 8003168:	40020800 	.word	0x40020800
 800316c:	40020c00 	.word	0x40020c00
 8003170:	40021000 	.word	0x40021000
 8003174:	40013c00 	.word	0x40013c00

08003178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
 8003184:	4613      	mov	r3, r2
 8003186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003188:	787b      	ldrb	r3, [r7, #1]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003194:	e003      	b.n	800319e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	041a      	lsls	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	619a      	str	r2, [r3, #24]
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e25b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d075      	beq.n	80032b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ca:	4ba3      	ldr	r3, [pc, #652]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d112      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b9d      	ldr	r3, [pc, #628]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b99      	ldr	r3, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x108>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d157      	bne.n	80032b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e236      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x74>
 8003212:	4b91      	ldr	r3, [pc, #580]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a90      	ldr	r2, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b8b      	ldr	r3, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a8a      	ldr	r2, [pc, #552]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a87      	ldr	r2, [pc, #540]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xb0>
 8003244:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b81      	ldr	r3, [pc, #516]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a80      	ldr	r2, [pc, #512]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fcb0 	bl	8001bc8 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fcac 	bl	8001bc8 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e1fb      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xc0>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fc9c 	bl	8001bc8 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fc98 	bl	8001bc8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1e7      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0xe8>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032da:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b5c      	ldr	r3, [pc, #368]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1bb      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4952      	ldr	r1, [pc, #328]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_OscConfig+0x2b0>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fc51 	bl	8001bc8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800332a:	f7fe fc4d 	bl	8001bc8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e19c      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4940      	ldr	r1, [pc, #256]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_OscConfig+0x2b0>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fc30 	bl	8001bc8 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336c:	f7fe fc2c 	bl	8001bc8 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e17b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d030      	beq.n	80033f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d016      	beq.n	80033cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b30      	ldr	r3, [pc, #192]	; (8003460 <HAL_RCC_OscConfig+0x2b4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fc10 	bl	8001bc8 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc0c 	bl	8001bc8 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e15b      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b26      	ldr	r3, [pc, #152]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x200>
 80033ca:	e015      	b.n	80033f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x2b4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d2:	f7fe fbf9 	bl	8001bc8 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033da:	f7fe fbf5 	bl	8001bc8 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e144      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f0      	bne.n	80033da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a0 	beq.w	8003546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10f      	bne.n	8003436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	6413      	str	r3, [r2, #64]	; 0x40
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d121      	bne.n	8003486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_RCC_OscConfig+0x2b8>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe fbbb 	bl	8001bc8 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e011      	b.n	800347a <HAL_RCC_OscConfig+0x2ce>
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	42470000 	.word	0x42470000
 8003460:	42470e80 	.word	0x42470e80
 8003464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe fbae 	bl	8001bc8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0fd      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347a:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x4d4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d106      	bne.n	800349c <HAL_RCC_OscConfig+0x2f0>
 800348e:	4b7d      	ldr	r3, [pc, #500]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a7c      	ldr	r2, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x32a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034a4:	4b77      	ldr	r3, [pc, #476]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a76      	ldr	r2, [pc, #472]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	4b74      	ldr	r3, [pc, #464]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a73      	ldr	r2, [pc, #460]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x32a>
 80034be:	4b71      	ldr	r3, [pc, #452]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a70      	ldr	r2, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b6e      	ldr	r3, [pc, #440]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a6d      	ldr	r2, [pc, #436]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe fb73 	bl	8001bc8 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fb6f 	bl	8001bc8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0bc      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b61      	ldr	r3, [pc, #388]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x33a>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe fb5d 	bl	8001bc8 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe fb59 	bl	8001bc8 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0a6      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8092 	beq.w	8003674 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003550:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d05c      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d141      	bne.n	80035e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b48      	ldr	r3, [pc, #288]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fb2d 	bl	8001bc8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fb29 	bl	8001bc8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e078      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	4b3f      	ldr	r3, [pc, #252]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	019b      	lsls	r3, r3, #6
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	3b01      	subs	r3, #1
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
 80035b4:	4933      	ldr	r1, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe fb02 	bl	8001bc8 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fafe 	bl	8001bc8 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04d      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x41c>
 80035e6:	e045      	b.n	8003674 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x4dc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe faeb 	bl	8001bc8 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fae7 	bl	8001bc8 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e036      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x44a>
 8003614:	e02e      	b.n	8003674 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e029      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <HAL_RCC_OscConfig+0x4d8>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	429a      	cmp	r2, r3
 8003634:	d11c      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d115      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d10d      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40007000 	.word	0x40007000
 8003684:	40023800 	.word	0x40023800
 8003688:	42470060 	.word	0x42470060

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cc      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a58      	ldr	r2, [pc, #352]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e067      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4934      	ldr	r1, [pc, #208]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe fa24 	bl	8001bc8 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe fa20 	bl	8001bc8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e04f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b25      	ldr	r3, [pc, #148]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20c      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4601      	mov	r1, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	fa21 f303 	lsr.w	r3, r1, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f984 	bl	8001b40 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00
 8003848:	40023800 	.word	0x40023800
 800384c:	08005808 	.word	0x08005808
 8003850:	20000008 	.word	0x20000008
 8003854:	2000000c 	.word	0x2000000c

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800386e:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d007      	beq.n	800388a <HAL_RCC_GetSysClockFreq+0x32>
 800387a:	2b08      	cmp	r3, #8
 800387c:	d008      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x38>
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 80b4 	bne.w	80039ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b5e      	ldr	r3, [pc, #376]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003886:	60bb      	str	r3, [r7, #8]
       break;
 8003888:	e0b3      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800388c:	60bb      	str	r3, [r7, #8]
      break;
 800388e:	e0b0      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003898:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389a:	4b58      	ldr	r3, [pc, #352]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d04a      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b55      	ldr	r3, [pc, #340]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	ea03 0501 	and.w	r5, r3, r1
 80038bc:	ea04 0602 	and.w	r6, r4, r2
 80038c0:	4629      	mov	r1, r5
 80038c2:	4632      	mov	r2, r6
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	0154      	lsls	r4, r2, #5
 80038ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038d2:	014b      	lsls	r3, r1, #5
 80038d4:	4619      	mov	r1, r3
 80038d6:	4622      	mov	r2, r4
 80038d8:	1b49      	subs	r1, r1, r5
 80038da:	eb62 0206 	sbc.w	r2, r2, r6
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	0194      	lsls	r4, r2, #6
 80038e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038ec:	018b      	lsls	r3, r1, #6
 80038ee:	1a5b      	subs	r3, r3, r1
 80038f0:	eb64 0402 	sbc.w	r4, r4, r2
 80038f4:	f04f 0100 	mov.w	r1, #0
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	00e2      	lsls	r2, r4, #3
 80038fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003902:	00d9      	lsls	r1, r3, #3
 8003904:	460b      	mov	r3, r1
 8003906:	4614      	mov	r4, r2
 8003908:	195b      	adds	r3, r3, r5
 800390a:	eb44 0406 	adc.w	r4, r4, r6
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	0262      	lsls	r2, r4, #9
 8003918:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800391c:	0259      	lsls	r1, r3, #9
 800391e:	460b      	mov	r3, r1
 8003920:	4614      	mov	r4, r2
 8003922:	4618      	mov	r0, r3
 8003924:	4621      	mov	r1, r4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f04f 0400 	mov.w	r4, #0
 800392c:	461a      	mov	r2, r3
 800392e:	4623      	mov	r3, r4
 8003930:	f7fc fc50 	bl	80001d4 <__aeabi_uldivmod>
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e049      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	f04f 0400 	mov.w	r4, #0
 8003946:	f240 11ff 	movw	r1, #511	; 0x1ff
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	ea03 0501 	and.w	r5, r3, r1
 8003952:	ea04 0602 	and.w	r6, r4, r2
 8003956:	4629      	mov	r1, r5
 8003958:	4632      	mov	r2, r6
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	f04f 0400 	mov.w	r4, #0
 8003962:	0154      	lsls	r4, r2, #5
 8003964:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003968:	014b      	lsls	r3, r1, #5
 800396a:	4619      	mov	r1, r3
 800396c:	4622      	mov	r2, r4
 800396e:	1b49      	subs	r1, r1, r5
 8003970:	eb62 0206 	sbc.w	r2, r2, r6
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	f04f 0400 	mov.w	r4, #0
 800397c:	0194      	lsls	r4, r2, #6
 800397e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003982:	018b      	lsls	r3, r1, #6
 8003984:	1a5b      	subs	r3, r3, r1
 8003986:	eb64 0402 	sbc.w	r4, r4, r2
 800398a:	f04f 0100 	mov.w	r1, #0
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003998:	00d9      	lsls	r1, r3, #3
 800399a:	460b      	mov	r3, r1
 800399c:	4614      	mov	r4, r2
 800399e:	195b      	adds	r3, r3, r5
 80039a0:	eb44 0406 	adc.w	r4, r4, r6
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	02a2      	lsls	r2, r4, #10
 80039ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039b2:	0299      	lsls	r1, r3, #10
 80039b4:	460b      	mov	r3, r1
 80039b6:	4614      	mov	r4, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	4621      	mov	r1, r4
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	461a      	mov	r2, r3
 80039c4:	4623      	mov	r3, r4
 80039c6:	f7fc fc05 	bl	80001d4 <__aeabi_uldivmod>
 80039ca:	4603      	mov	r3, r0
 80039cc:	460c      	mov	r4, r1
 80039ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60bb      	str	r3, [r7, #8]
      break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ee:	60bb      	str	r3, [r7, #8]
      break;
 80039f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039f2:	68bb      	ldr	r3, [r7, #8]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000008 	.word	0x20000008

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4601      	mov	r1, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08005818 	.word	0x08005818

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005818 	.word	0x08005818

08003a70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e01d      	b.n	8003abe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fd02 	bl	80014a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f000 fb84 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd7a 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIM_PWM_Start+0x60>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d107      	bne.n	8003afa <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b06      	cmp	r3, #6
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000

08003b2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	6839      	ldr	r1, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fd48 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_TIM_PWM_Stop+0x94>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d117      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x52>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	f240 4344 	movw	r3, #1092	; 0x444
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x52>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_TIM_PWM_Stop+0x82>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	f240 4344 	movw	r3, #1092	; 0x444
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_PWM_Stop+0x82>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40010000 	.word	0x40010000

08003bc4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	d841      	bhi.n	8003c58 <HAL_TIM_PWM_Start_IT+0x94>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <HAL_TIM_PWM_Start_IT+0x18>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c59 	.word	0x08003c59
 8003be4:	08003c59 	.word	0x08003c59
 8003be8:	08003c59 	.word	0x08003c59
 8003bec:	08003c23 	.word	0x08003c23
 8003bf0:	08003c59 	.word	0x08003c59
 8003bf4:	08003c59 	.word	0x08003c59
 8003bf8:	08003c59 	.word	0x08003c59
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c59 	.word	0x08003c59
 8003c04:	08003c59 	.word	0x08003c59
 8003c08:	08003c59 	.word	0x08003c59
 8003c0c:	08003c47 	.word	0x08003c47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0202 	orr.w	r2, r2, #2
 8003c1e:	60da      	str	r2, [r3, #12]
      break;
 8003c20:	e01b      	b.n	8003c5a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0204 	orr.w	r2, r2, #4
 8003c30:	60da      	str	r2, [r3, #12]
      break;
 8003c32:	e012      	b.n	8003c5a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0208 	orr.w	r2, r2, #8
 8003c42:	60da      	str	r2, [r3, #12]
      break;
 8003c44:	e009      	b.n	8003c5a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0210 	orr.w	r2, r2, #16
 8003c54:	60da      	str	r2, [r3, #12]
      break;
 8003c56:	e000      	b.n	8003c5a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003c58:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fcb6 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <HAL_TIM_PWM_Start_IT+0xec>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d007      	beq.n	8003ca4 <HAL_TIM_PWM_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000

08003cb4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d841      	bhi.n	8003d48 <HAL_TIM_PWM_Stop_IT+0x94>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_TIM_PWM_Stop_IT+0x18>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003d49 	.word	0x08003d49
 8003cd4:	08003d49 	.word	0x08003d49
 8003cd8:	08003d49 	.word	0x08003d49
 8003cdc:	08003d13 	.word	0x08003d13
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003d49 	.word	0x08003d49
 8003ce8:	08003d49 	.word	0x08003d49
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003d49 	.word	0x08003d49
 8003cfc:	08003d37 	.word	0x08003d37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0202 	bic.w	r2, r2, #2
 8003d0e:	60da      	str	r2, [r3, #12]
      break;
 8003d10:	e01b      	b.n	8003d4a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	60da      	str	r2, [r3, #12]
      break;
 8003d22:	e012      	b.n	8003d4a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0208 	bic.w	r2, r2, #8
 8003d32:	60da      	str	r2, [r3, #12]
      break;
 8003d34:	e009      	b.n	8003d4a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0210 	bic.w	r2, r2, #16
 8003d44:	60da      	str	r2, [r3, #12]
      break;
 8003d46:	e000      	b.n	8003d4a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8003d48:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc3e 	bl	80045d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_TIM_PWM_Stop_IT+0x118>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d117      	bne.n	8003d92 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_TIM_PWM_Stop_IT+0xde>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	f240 4344 	movw	r3, #1092	; 0x444
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_PWM_Stop_IT+0xde>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_TIM_PWM_Stop_IT+0x10e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	f240 4344 	movw	r3, #1092	; 0x444
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_PWM_Stop_IT+0x10e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40010000 	.word	0x40010000

08003dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0202 	mvn.w	r2, #2
 8003dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f9b4 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9a6 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f9b7 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0204 	mvn.w	r2, #4
 8003e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f98a 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f97c 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f98d 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d122      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0208 	mvn.w	r2, #8
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f960 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f952 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f963 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0210 	mvn.w	r2, #16
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2208      	movs	r2, #8
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f936 	bl	8004180 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f928 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f939 	bl	8004194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10e      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0201 	mvn.w	r2, #1
 8003f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd f86e 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fc1a 	bl	80047b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b40      	cmp	r3, #64	; 0x40
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8fe 	bl	80041a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0220 	mvn.w	r2, #32
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fbe4 	bl	80047a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0b4      	b.n	8004164 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	f200 809f 	bhi.w	8004150 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800404d 	.word	0x0800404d
 800401c:	08004151 	.word	0x08004151
 8004020:	08004151 	.word	0x08004151
 8004024:	08004151 	.word	0x08004151
 8004028:	0800408d 	.word	0x0800408d
 800402c:	08004151 	.word	0x08004151
 8004030:	08004151 	.word	0x08004151
 8004034:	08004151 	.word	0x08004151
 8004038:	080040cf 	.word	0x080040cf
 800403c:	08004151 	.word	0x08004151
 8004040:	08004151 	.word	0x08004151
 8004044:	08004151 	.word	0x08004151
 8004048:	0800410f 	.word	0x0800410f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 f932 	bl	80042bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0208 	orr.w	r2, r2, #8
 8004066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6999      	ldr	r1, [r3, #24]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	619a      	str	r2, [r3, #24]
      break;
 800408a:	e062      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68b9      	ldr	r1, [r7, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f978 	bl	8004388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6999      	ldr	r1, [r3, #24]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	619a      	str	r2, [r3, #24]
      break;
 80040cc:	e041      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f9c3 	bl	8004460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0208 	orr.w	r2, r2, #8
 80040e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0204 	bic.w	r2, r2, #4
 80040f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69d9      	ldr	r1, [r3, #28]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	61da      	str	r2, [r3, #28]
      break;
 800410c:	e021      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fa0d 	bl	8004534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69da      	ldr	r2, [r3, #28]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69d9      	ldr	r1, [r3, #28]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	021a      	lsls	r2, r3, #8
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	61da      	str	r2, [r3, #28]
      break;
 800414e:	e000      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004150:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <TIM_Base_SetConfig+0xe4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d00b      	beq.n	80041f4 <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <TIM_Base_SetConfig+0xe8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <TIM_Base_SetConfig+0xec>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a2f      	ldr	r2, [pc, #188]	; (80042ac <TIM_Base_SetConfig+0xf0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a25      	ldr	r2, [pc, #148]	; (80042a0 <TIM_Base_SetConfig+0xe4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01b      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004214:	d017      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <TIM_Base_SetConfig+0xe8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <TIM_Base_SetConfig+0xec>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a20      	ldr	r2, [pc, #128]	; (80042ac <TIM_Base_SetConfig+0xf0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <TIM_Base_SetConfig+0xf4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <TIM_Base_SetConfig+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a1d      	ldr	r2, [pc, #116]	; (80042b8 <TIM_Base_SetConfig+0xfc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <TIM_Base_SetConfig+0xe4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	f023 0201 	bic.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 0302 	bic.w	r3, r3, #2
 8004304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <TIM_OC1_SetConfig+0xc8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10c      	bne.n	8004332 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0308 	bic.w	r3, r3, #8
 800431e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <TIM_OC1_SetConfig+0xc8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d111      	bne.n	800435e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bf00      	nop
 800437a:	371c      	adds	r7, #28
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	40010000 	.word	0x40010000

08004388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0210 	bic.w	r2, r3, #16
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0320 	bic.w	r3, r3, #32
 80043d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	; (800445c <TIM_OC2_SetConfig+0xd4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d10d      	bne.n	8004404 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004402:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a15      	ldr	r2, [pc, #84]	; (800445c <TIM_OC2_SetConfig+0xd4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d113      	bne.n	8004434 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800441a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000

08004460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <TIM_OC3_SetConfig+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <TIM_OC3_SetConfig+0xd0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d113      	bne.n	800450a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40010000 	.word	0x40010000

08004534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800457e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	031b      	lsls	r3, r3, #12
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <TIM_OC4_SetConfig+0x9c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d109      	bne.n	80045a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000

080045d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2201      	movs	r2, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1a      	ldr	r2, [r3, #32]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	401a      	ands	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	fa01 f303 	lsl.w	r3, r1, r3
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e050      	b.n	80046da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d018      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d013      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00e      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d009      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d004      	beq.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10c      	bne.n	80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40014000 	.word	0x40014000

080046fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004714:	2302      	movs	r3, #2
 8004716:	e03d      	b.n	8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e03f      	b.n	800485a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc ffa2 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800480a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fc37 	bl	8005080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b20      	cmp	r3, #32
 800487c:	d153      	bne.n	8004926 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <HAL_UART_Transmit_DMA+0x26>
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e04c      	b.n	8004928 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UART_Transmit_DMA+0x38>
 8004898:	2302      	movs	r3, #2
 800489a:	e045      	b.n	8004928 <HAL_UART_Transmit_DMA+0xc4>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	88fa      	ldrh	r2, [r7, #6]
 80048b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2221      	movs	r2, #33	; 0x21
 80048c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_UART_Transmit_DMA+0xcc>)
 80048ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	4a18      	ldr	r2, [pc, #96]	; (8004934 <HAL_UART_Transmit_DMA+0xd0>)
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	4a17      	ldr	r2, [pc, #92]	; (8004938 <HAL_UART_Transmit_DMA+0xd4>)
 80048da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	2200      	movs	r2, #0
 80048e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80048e4:	f107 0308 	add.w	r3, r7, #8
 80048e8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6819      	ldr	r1, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3304      	adds	r3, #4
 80048f8:	461a      	mov	r2, r3
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	f7fd ff68 	bl	80027d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004908:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695a      	ldr	r2, [r3, #20]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004920:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e000      	b.n	8004928 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	08004c8d 	.word	0x08004c8d
 8004934:	08004cdf 	.word	0x08004cdf
 8004938:	08004d7f 	.word	0x08004d7f

0800493c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d166      	bne.n	8004a24 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Receive_DMA+0x26>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e05f      	b.n	8004a26 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UART_Receive_DMA+0x38>
 8004970:	2302      	movs	r3, #2
 8004972:	e058      	b.n	8004a26 <HAL_UART_Receive_DMA+0xea>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2222      	movs	r2, #34	; 0x22
 8004992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <HAL_UART_Receive_DMA+0xf4>)
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <HAL_UART_Receive_DMA+0xf8>)
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <HAL_UART_Receive_DMA+0xfc>)
 80049ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	2200      	movs	r2, #0
 80049b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	f7fd feff 	bl	80027d0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695a      	ldr	r2, [r3, #20]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08004cfb 	.word	0x08004cfb
 8004a34:	08004d63 	.word	0x08004d63
 8004a38:	08004d7f 	.word	0x08004d7f

08004a3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x52>
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa79 	bl	8004f7e <UART_Receive_IT>
      return;
 8004a8c:	e0d1      	b.n	8004c32 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80b0 	beq.w	8004bf6 <HAL_UART_IRQHandler+0x1ba>
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_UART_IRQHandler+0x70>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80a5 	beq.w	8004bf6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <HAL_UART_IRQHandler+0x90>
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_UART_IRQHandler+0xb0>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	f043 0202 	orr.w	r2, r3, #2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_UART_IRQHandler+0xd0>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	f043 0204 	orr.w	r2, r3, #4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00f      	beq.n	8004b36 <HAL_UART_IRQHandler+0xfa>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_UART_IRQHandler+0xee>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d078      	beq.n	8004c30 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <HAL_UART_IRQHandler+0x11c>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa13 	bl	8004f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <HAL_UART_IRQHandler+0x144>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d031      	beq.n	8004be4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f95c 	bl	8004e3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d123      	bne.n	8004bdc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d013      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	4a21      	ldr	r2, [pc, #132]	; (8004c38 <HAL_UART_IRQHandler+0x1fc>)
 8004bb2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd fed1 	bl	8002960 <HAL_DMA_Abort_IT>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd2:	e00e      	b.n	8004bf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f84f 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bda:	e00a      	b.n	8004bf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f84b 	bl	8004c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be2:	e006      	b.n	8004bf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f847 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004bf0:	e01e      	b.n	8004c30 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf2:	bf00      	nop
    return;
 8004bf4:	e01c      	b.n	8004c30 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_UART_IRQHandler+0x1d6>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f949 	bl	8004ea2 <UART_Transmit_IT>
    return;
 8004c10:	e00f      	b.n	8004c32 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1f6>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f991 	bl	8004f4e <UART_EndTransmit_IT>
    return;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004c30:	bf00      	nop
  }
}
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	08004e7b 	.word	0x08004e7b

08004c3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d113      	bne.n	8004cd0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cbc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ccc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cce:	e002      	b.n	8004cd6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ffb3 	bl	8004c3c <HAL_UART_TxCpltCallback>
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff ffaf 	bl	8004c50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11e      	bne.n	8004d54 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d2a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695a      	ldr	r2, [r3, #20]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7fc fa15 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff77 	bl	8004c64 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b21      	cmp	r3, #33	; 0x21
 8004db0:	d108      	bne.n	8004dc4 <UART_DMAError+0x46>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f000 f827 	bl	8004e12 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b22      	cmp	r3, #34	; 0x22
 8004de4:	d108      	bne.n	8004df8 <UART_DMAError+0x7a>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004df2:	68b8      	ldr	r0, [r7, #8]
 8004df4:	f000 f823 	bl	8004e3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	f043 0210 	orr.w	r2, r3, #16
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e04:	68b8      	ldr	r0, [r7, #8]
 8004e06:	f7ff ff37 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e28:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e54:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff feef 	bl	8004c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b21      	cmp	r3, #33	; 0x21
 8004eb4:	d144      	bne.n	8004f40 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d11a      	bne.n	8004ef6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]
 8004ee8:	e00e      	b.n	8004f08 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	621a      	str	r2, [r3, #32]
 8004ef4:	e008      	b.n	8004f08 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6211      	str	r1, [r2, #32]
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10f      	bne.n	8004f3c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fe64 	bl	8004c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b22      	cmp	r3, #34	; 0x22
 8004f90:	d171      	bne.n	8005076 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9a:	d123      	bne.n	8004fe4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc6:	e029      	b.n	800501c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
 8004fe2:	e01b      	b.n	800501c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6858      	ldr	r0, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6291      	str	r1, [r2, #40]	; 0x28
 8004ffc:	b2c2      	uxtb	r2, r0
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e00c      	b.n	800501c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	1c58      	adds	r0, r3, #1
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	6288      	str	r0, [r1, #40]	; 0x28
 8005014:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29b      	uxth	r3, r3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4619      	mov	r1, r3
 800502a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800502c:	2b00      	cmp	r3, #0
 800502e:	d120      	bne.n	8005072 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0220 	bic.w	r2, r2, #32
 800503e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800504e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fc f88b 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e002      	b.n	8005078 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050c2:	f023 030c 	bic.w	r3, r3, #12
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	430b      	orrs	r3, r1
 80050ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ee:	f040 818b 	bne.w	8005408 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4ac1      	ldr	r2, [pc, #772]	; (80053fc <UART_SetConfig+0x37c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d005      	beq.n	8005108 <UART_SetConfig+0x88>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4abf      	ldr	r2, [pc, #764]	; (8005400 <UART_SetConfig+0x380>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f040 80bd 	bne.w	8005282 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe fc9e 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 800510c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	461d      	mov	r5, r3
 8005112:	f04f 0600 	mov.w	r6, #0
 8005116:	46a8      	mov	r8, r5
 8005118:	46b1      	mov	r9, r6
 800511a:	eb18 0308 	adds.w	r3, r8, r8
 800511e:	eb49 0409 	adc.w	r4, r9, r9
 8005122:	4698      	mov	r8, r3
 8005124:	46a1      	mov	r9, r4
 8005126:	eb18 0805 	adds.w	r8, r8, r5
 800512a:	eb49 0906 	adc.w	r9, r9, r6
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800513a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800513e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005142:	4688      	mov	r8, r1
 8005144:	4691      	mov	r9, r2
 8005146:	eb18 0005 	adds.w	r0, r8, r5
 800514a:	eb49 0106 	adc.w	r1, r9, r6
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	461d      	mov	r5, r3
 8005154:	f04f 0600 	mov.w	r6, #0
 8005158:	196b      	adds	r3, r5, r5
 800515a:	eb46 0406 	adc.w	r4, r6, r6
 800515e:	461a      	mov	r2, r3
 8005160:	4623      	mov	r3, r4
 8005162:	f7fb f837 	bl	80001d4 <__aeabi_uldivmod>
 8005166:	4603      	mov	r3, r0
 8005168:	460c      	mov	r4, r1
 800516a:	461a      	mov	r2, r3
 800516c:	4ba5      	ldr	r3, [pc, #660]	; (8005404 <UART_SetConfig+0x384>)
 800516e:	fba3 2302 	umull	r2, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	461d      	mov	r5, r3
 800517c:	f04f 0600 	mov.w	r6, #0
 8005180:	46a9      	mov	r9, r5
 8005182:	46b2      	mov	sl, r6
 8005184:	eb19 0309 	adds.w	r3, r9, r9
 8005188:	eb4a 040a 	adc.w	r4, sl, sl
 800518c:	4699      	mov	r9, r3
 800518e:	46a2      	mov	sl, r4
 8005190:	eb19 0905 	adds.w	r9, r9, r5
 8005194:	eb4a 0a06 	adc.w	sl, sl, r6
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051ac:	4689      	mov	r9, r1
 80051ae:	4692      	mov	sl, r2
 80051b0:	eb19 0005 	adds.w	r0, r9, r5
 80051b4:	eb4a 0106 	adc.w	r1, sl, r6
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	461d      	mov	r5, r3
 80051be:	f04f 0600 	mov.w	r6, #0
 80051c2:	196b      	adds	r3, r5, r5
 80051c4:	eb46 0406 	adc.w	r4, r6, r6
 80051c8:	461a      	mov	r2, r3
 80051ca:	4623      	mov	r3, r4
 80051cc:	f7fb f802 	bl	80001d4 <__aeabi_uldivmod>
 80051d0:	4603      	mov	r3, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	461a      	mov	r2, r3
 80051d6:	4b8b      	ldr	r3, [pc, #556]	; (8005404 <UART_SetConfig+0x384>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	; 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	3332      	adds	r3, #50	; 0x32
 80051ea:	4a86      	ldr	r2, [pc, #536]	; (8005404 <UART_SetConfig+0x384>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f8:	4498      	add	r8, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	461d      	mov	r5, r3
 80051fe:	f04f 0600 	mov.w	r6, #0
 8005202:	46a9      	mov	r9, r5
 8005204:	46b2      	mov	sl, r6
 8005206:	eb19 0309 	adds.w	r3, r9, r9
 800520a:	eb4a 040a 	adc.w	r4, sl, sl
 800520e:	4699      	mov	r9, r3
 8005210:	46a2      	mov	sl, r4
 8005212:	eb19 0905 	adds.w	r9, r9, r5
 8005216:	eb4a 0a06 	adc.w	sl, sl, r6
 800521a:	f04f 0100 	mov.w	r1, #0
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005226:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800522a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800522e:	4689      	mov	r9, r1
 8005230:	4692      	mov	sl, r2
 8005232:	eb19 0005 	adds.w	r0, r9, r5
 8005236:	eb4a 0106 	adc.w	r1, sl, r6
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	461d      	mov	r5, r3
 8005240:	f04f 0600 	mov.w	r6, #0
 8005244:	196b      	adds	r3, r5, r5
 8005246:	eb46 0406 	adc.w	r4, r6, r6
 800524a:	461a      	mov	r2, r3
 800524c:	4623      	mov	r3, r4
 800524e:	f7fa ffc1 	bl	80001d4 <__aeabi_uldivmod>
 8005252:	4603      	mov	r3, r0
 8005254:	460c      	mov	r4, r1
 8005256:	461a      	mov	r2, r3
 8005258:	4b6a      	ldr	r3, [pc, #424]	; (8005404 <UART_SetConfig+0x384>)
 800525a:	fba3 1302 	umull	r1, r3, r3, r2
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2164      	movs	r1, #100	; 0x64
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	3332      	adds	r3, #50	; 0x32
 800526c:	4a65      	ldr	r2, [pc, #404]	; (8005404 <UART_SetConfig+0x384>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	f003 0207 	and.w	r2, r3, #7
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4442      	add	r2, r8
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	e26f      	b.n	8005762 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005282:	f7fe fbcd 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8005286:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	461d      	mov	r5, r3
 800528c:	f04f 0600 	mov.w	r6, #0
 8005290:	46a8      	mov	r8, r5
 8005292:	46b1      	mov	r9, r6
 8005294:	eb18 0308 	adds.w	r3, r8, r8
 8005298:	eb49 0409 	adc.w	r4, r9, r9
 800529c:	4698      	mov	r8, r3
 800529e:	46a1      	mov	r9, r4
 80052a0:	eb18 0805 	adds.w	r8, r8, r5
 80052a4:	eb49 0906 	adc.w	r9, r9, r6
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052bc:	4688      	mov	r8, r1
 80052be:	4691      	mov	r9, r2
 80052c0:	eb18 0005 	adds.w	r0, r8, r5
 80052c4:	eb49 0106 	adc.w	r1, r9, r6
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	461d      	mov	r5, r3
 80052ce:	f04f 0600 	mov.w	r6, #0
 80052d2:	196b      	adds	r3, r5, r5
 80052d4:	eb46 0406 	adc.w	r4, r6, r6
 80052d8:	461a      	mov	r2, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	f7fa ff7a 	bl	80001d4 <__aeabi_uldivmod>
 80052e0:	4603      	mov	r3, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <UART_SetConfig+0x384>)
 80052e8:	fba3 2302 	umull	r2, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	461d      	mov	r5, r3
 80052f6:	f04f 0600 	mov.w	r6, #0
 80052fa:	46a9      	mov	r9, r5
 80052fc:	46b2      	mov	sl, r6
 80052fe:	eb19 0309 	adds.w	r3, r9, r9
 8005302:	eb4a 040a 	adc.w	r4, sl, sl
 8005306:	4699      	mov	r9, r3
 8005308:	46a2      	mov	sl, r4
 800530a:	eb19 0905 	adds.w	r9, r9, r5
 800530e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005326:	4689      	mov	r9, r1
 8005328:	4692      	mov	sl, r2
 800532a:	eb19 0005 	adds.w	r0, r9, r5
 800532e:	eb4a 0106 	adc.w	r1, sl, r6
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	461d      	mov	r5, r3
 8005338:	f04f 0600 	mov.w	r6, #0
 800533c:	196b      	adds	r3, r5, r5
 800533e:	eb46 0406 	adc.w	r4, r6, r6
 8005342:	461a      	mov	r2, r3
 8005344:	4623      	mov	r3, r4
 8005346:	f7fa ff45 	bl	80001d4 <__aeabi_uldivmod>
 800534a:	4603      	mov	r3, r0
 800534c:	460c      	mov	r4, r1
 800534e:	461a      	mov	r2, r3
 8005350:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <UART_SetConfig+0x384>)
 8005352:	fba3 1302 	umull	r1, r3, r3, r2
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2164      	movs	r1, #100	; 0x64
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	3332      	adds	r3, #50	; 0x32
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <UART_SetConfig+0x384>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005372:	4498      	add	r8, r3
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	461d      	mov	r5, r3
 8005378:	f04f 0600 	mov.w	r6, #0
 800537c:	46a9      	mov	r9, r5
 800537e:	46b2      	mov	sl, r6
 8005380:	eb19 0309 	adds.w	r3, r9, r9
 8005384:	eb4a 040a 	adc.w	r4, sl, sl
 8005388:	4699      	mov	r9, r3
 800538a:	46a2      	mov	sl, r4
 800538c:	eb19 0905 	adds.w	r9, r9, r5
 8005390:	eb4a 0a06 	adc.w	sl, sl, r6
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053a8:	4689      	mov	r9, r1
 80053aa:	4692      	mov	sl, r2
 80053ac:	eb19 0005 	adds.w	r0, r9, r5
 80053b0:	eb4a 0106 	adc.w	r1, sl, r6
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	461d      	mov	r5, r3
 80053ba:	f04f 0600 	mov.w	r6, #0
 80053be:	196b      	adds	r3, r5, r5
 80053c0:	eb46 0406 	adc.w	r4, r6, r6
 80053c4:	461a      	mov	r2, r3
 80053c6:	4623      	mov	r3, r4
 80053c8:	f7fa ff04 	bl	80001d4 <__aeabi_uldivmod>
 80053cc:	4603      	mov	r3, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	461a      	mov	r2, r3
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <UART_SetConfig+0x384>)
 80053d4:	fba3 1302 	umull	r1, r3, r3, r2
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	2164      	movs	r1, #100	; 0x64
 80053dc:	fb01 f303 	mul.w	r3, r1, r3
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	3332      	adds	r3, #50	; 0x32
 80053e6:	4a07      	ldr	r2, [pc, #28]	; (8005404 <UART_SetConfig+0x384>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	f003 0207 	and.w	r2, r3, #7
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4442      	add	r2, r8
 80053f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80053fa:	e1b2      	b.n	8005762 <UART_SetConfig+0x6e2>
 80053fc:	40011000 	.word	0x40011000
 8005400:	40011400 	.word	0x40011400
 8005404:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4ad7      	ldr	r2, [pc, #860]	; (800576c <UART_SetConfig+0x6ec>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d005      	beq.n	800541e <UART_SetConfig+0x39e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4ad6      	ldr	r2, [pc, #856]	; (8005770 <UART_SetConfig+0x6f0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	f040 80d1 	bne.w	80055c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800541e:	f7fe fb13 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8005422:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	469a      	mov	sl, r3
 8005428:	f04f 0b00 	mov.w	fp, #0
 800542c:	46d0      	mov	r8, sl
 800542e:	46d9      	mov	r9, fp
 8005430:	eb18 0308 	adds.w	r3, r8, r8
 8005434:	eb49 0409 	adc.w	r4, r9, r9
 8005438:	4698      	mov	r8, r3
 800543a:	46a1      	mov	r9, r4
 800543c:	eb18 080a 	adds.w	r8, r8, sl
 8005440:	eb49 090b 	adc.w	r9, r9, fp
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005450:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005454:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005458:	4688      	mov	r8, r1
 800545a:	4691      	mov	r9, r2
 800545c:	eb1a 0508 	adds.w	r5, sl, r8
 8005460:	eb4b 0609 	adc.w	r6, fp, r9
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	0094      	lsls	r4, r2, #2
 8005478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800547c:	008b      	lsls	r3, r1, #2
 800547e:	461a      	mov	r2, r3
 8005480:	4623      	mov	r3, r4
 8005482:	4628      	mov	r0, r5
 8005484:	4631      	mov	r1, r6
 8005486:	f7fa fea5 	bl	80001d4 <__aeabi_uldivmod>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	461a      	mov	r2, r3
 8005490:	4bb8      	ldr	r3, [pc, #736]	; (8005774 <UART_SetConfig+0x6f4>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	469b      	mov	fp, r3
 80054a0:	f04f 0c00 	mov.w	ip, #0
 80054a4:	46d9      	mov	r9, fp
 80054a6:	46e2      	mov	sl, ip
 80054a8:	eb19 0309 	adds.w	r3, r9, r9
 80054ac:	eb4a 040a 	adc.w	r4, sl, sl
 80054b0:	4699      	mov	r9, r3
 80054b2:	46a2      	mov	sl, r4
 80054b4:	eb19 090b 	adds.w	r9, r9, fp
 80054b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054bc:	f04f 0100 	mov.w	r1, #0
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054d0:	4689      	mov	r9, r1
 80054d2:	4692      	mov	sl, r2
 80054d4:	eb1b 0509 	adds.w	r5, fp, r9
 80054d8:	eb4c 060a 	adc.w	r6, ip, sl
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	f04f 0400 	mov.w	r4, #0
 80054ee:	0094      	lsls	r4, r2, #2
 80054f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054f4:	008b      	lsls	r3, r1, #2
 80054f6:	461a      	mov	r2, r3
 80054f8:	4623      	mov	r3, r4
 80054fa:	4628      	mov	r0, r5
 80054fc:	4631      	mov	r1, r6
 80054fe:	f7fa fe69 	bl	80001d4 <__aeabi_uldivmod>
 8005502:	4603      	mov	r3, r0
 8005504:	460c      	mov	r4, r1
 8005506:	461a      	mov	r2, r3
 8005508:	4b9a      	ldr	r3, [pc, #616]	; (8005774 <UART_SetConfig+0x6f4>)
 800550a:	fba3 1302 	umull	r1, r3, r3, r2
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2164      	movs	r1, #100	; 0x64
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	3332      	adds	r3, #50	; 0x32
 800551c:	4a95      	ldr	r2, [pc, #596]	; (8005774 <UART_SetConfig+0x6f4>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005528:	4498      	add	r8, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	469b      	mov	fp, r3
 800552e:	f04f 0c00 	mov.w	ip, #0
 8005532:	46d9      	mov	r9, fp
 8005534:	46e2      	mov	sl, ip
 8005536:	eb19 0309 	adds.w	r3, r9, r9
 800553a:	eb4a 040a 	adc.w	r4, sl, sl
 800553e:	4699      	mov	r9, r3
 8005540:	46a2      	mov	sl, r4
 8005542:	eb19 090b 	adds.w	r9, r9, fp
 8005546:	eb4a 0a0c 	adc.w	sl, sl, ip
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800555a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555e:	4689      	mov	r9, r1
 8005560:	4692      	mov	sl, r2
 8005562:	eb1b 0509 	adds.w	r5, fp, r9
 8005566:	eb4c 060a 	adc.w	r6, ip, sl
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	4619      	mov	r1, r3
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	f04f 0400 	mov.w	r4, #0
 800557c:	0094      	lsls	r4, r2, #2
 800557e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005582:	008b      	lsls	r3, r1, #2
 8005584:	461a      	mov	r2, r3
 8005586:	4623      	mov	r3, r4
 8005588:	4628      	mov	r0, r5
 800558a:	4631      	mov	r1, r6
 800558c:	f7fa fe22 	bl	80001d4 <__aeabi_uldivmod>
 8005590:	4603      	mov	r3, r0
 8005592:	460c      	mov	r4, r1
 8005594:	461a      	mov	r2, r3
 8005596:	4b77      	ldr	r3, [pc, #476]	; (8005774 <UART_SetConfig+0x6f4>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	3332      	adds	r3, #50	; 0x32
 80055aa:	4a72      	ldr	r2, [pc, #456]	; (8005774 <UART_SetConfig+0x6f4>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4442      	add	r2, r8
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e0d0      	b.n	8005762 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c0:	f7fe fa2e 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80055c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	469a      	mov	sl, r3
 80055ca:	f04f 0b00 	mov.w	fp, #0
 80055ce:	46d0      	mov	r8, sl
 80055d0:	46d9      	mov	r9, fp
 80055d2:	eb18 0308 	adds.w	r3, r8, r8
 80055d6:	eb49 0409 	adc.w	r4, r9, r9
 80055da:	4698      	mov	r8, r3
 80055dc:	46a1      	mov	r9, r4
 80055de:	eb18 080a 	adds.w	r8, r8, sl
 80055e2:	eb49 090b 	adc.w	r9, r9, fp
 80055e6:	f04f 0100 	mov.w	r1, #0
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055fa:	4688      	mov	r8, r1
 80055fc:	4691      	mov	r9, r2
 80055fe:	eb1a 0508 	adds.w	r5, sl, r8
 8005602:	eb4b 0609 	adc.w	r6, fp, r9
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	0094      	lsls	r4, r2, #2
 800561a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800561e:	008b      	lsls	r3, r1, #2
 8005620:	461a      	mov	r2, r3
 8005622:	4623      	mov	r3, r4
 8005624:	4628      	mov	r0, r5
 8005626:	4631      	mov	r1, r6
 8005628:	f7fa fdd4 	bl	80001d4 <__aeabi_uldivmod>
 800562c:	4603      	mov	r3, r0
 800562e:	460c      	mov	r4, r1
 8005630:	461a      	mov	r2, r3
 8005632:	4b50      	ldr	r3, [pc, #320]	; (8005774 <UART_SetConfig+0x6f4>)
 8005634:	fba3 2302 	umull	r2, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	469b      	mov	fp, r3
 8005642:	f04f 0c00 	mov.w	ip, #0
 8005646:	46d9      	mov	r9, fp
 8005648:	46e2      	mov	sl, ip
 800564a:	eb19 0309 	adds.w	r3, r9, r9
 800564e:	eb4a 040a 	adc.w	r4, sl, sl
 8005652:	4699      	mov	r9, r3
 8005654:	46a2      	mov	sl, r4
 8005656:	eb19 090b 	adds.w	r9, r9, fp
 800565a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800566a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800566e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005672:	4689      	mov	r9, r1
 8005674:	4692      	mov	sl, r2
 8005676:	eb1b 0509 	adds.w	r5, fp, r9
 800567a:	eb4c 060a 	adc.w	r6, ip, sl
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4619      	mov	r1, r3
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f04f 0400 	mov.w	r4, #0
 8005690:	0094      	lsls	r4, r2, #2
 8005692:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005696:	008b      	lsls	r3, r1, #2
 8005698:	461a      	mov	r2, r3
 800569a:	4623      	mov	r3, r4
 800569c:	4628      	mov	r0, r5
 800569e:	4631      	mov	r1, r6
 80056a0:	f7fa fd98 	bl	80001d4 <__aeabi_uldivmod>
 80056a4:	4603      	mov	r3, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	461a      	mov	r2, r3
 80056aa:	4b32      	ldr	r3, [pc, #200]	; (8005774 <UART_SetConfig+0x6f4>)
 80056ac:	fba3 1302 	umull	r1, r3, r3, r2
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	2164      	movs	r1, #100	; 0x64
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	3332      	adds	r3, #50	; 0x32
 80056be:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <UART_SetConfig+0x6f4>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ca:	4498      	add	r8, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	469b      	mov	fp, r3
 80056d0:	f04f 0c00 	mov.w	ip, #0
 80056d4:	46d9      	mov	r9, fp
 80056d6:	46e2      	mov	sl, ip
 80056d8:	eb19 0309 	adds.w	r3, r9, r9
 80056dc:	eb4a 040a 	adc.w	r4, sl, sl
 80056e0:	4699      	mov	r9, r3
 80056e2:	46a2      	mov	sl, r4
 80056e4:	eb19 090b 	adds.w	r9, r9, fp
 80056e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005700:	4689      	mov	r9, r1
 8005702:	4692      	mov	sl, r2
 8005704:	eb1b 0509 	adds.w	r5, fp, r9
 8005708:	eb4c 060a 	adc.w	r6, ip, sl
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	f04f 0400 	mov.w	r4, #0
 800571e:	0094      	lsls	r4, r2, #2
 8005720:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005724:	008b      	lsls	r3, r1, #2
 8005726:	461a      	mov	r2, r3
 8005728:	4623      	mov	r3, r4
 800572a:	4628      	mov	r0, r5
 800572c:	4631      	mov	r1, r6
 800572e:	f7fa fd51 	bl	80001d4 <__aeabi_uldivmod>
 8005732:	4603      	mov	r3, r0
 8005734:	460c      	mov	r4, r1
 8005736:	461a      	mov	r2, r3
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <UART_SetConfig+0x6f4>)
 800573a:	fba3 1302 	umull	r1, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2164      	movs	r1, #100	; 0x64
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	3332      	adds	r3, #50	; 0x32
 800574c:	4a09      	ldr	r2, [pc, #36]	; (8005774 <UART_SetConfig+0x6f4>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4442      	add	r2, r8
 800575e:	609a      	str	r2, [r3, #8]
}
 8005760:	e7ff      	b.n	8005762 <UART_SetConfig+0x6e2>
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	40011000 	.word	0x40011000
 8005770:	40011400 	.word	0x40011400
 8005774:	51eb851f 	.word	0x51eb851f

08005778 <__libc_init_array>:
 8005778:	b570      	push	{r4, r5, r6, lr}
 800577a:	4e0d      	ldr	r6, [pc, #52]	; (80057b0 <__libc_init_array+0x38>)
 800577c:	4c0d      	ldr	r4, [pc, #52]	; (80057b4 <__libc_init_array+0x3c>)
 800577e:	1ba4      	subs	r4, r4, r6
 8005780:	10a4      	asrs	r4, r4, #2
 8005782:	2500      	movs	r5, #0
 8005784:	42a5      	cmp	r5, r4
 8005786:	d109      	bne.n	800579c <__libc_init_array+0x24>
 8005788:	4e0b      	ldr	r6, [pc, #44]	; (80057b8 <__libc_init_array+0x40>)
 800578a:	4c0c      	ldr	r4, [pc, #48]	; (80057bc <__libc_init_array+0x44>)
 800578c:	f000 f820 	bl	80057d0 <_init>
 8005790:	1ba4      	subs	r4, r4, r6
 8005792:	10a4      	asrs	r4, r4, #2
 8005794:	2500      	movs	r5, #0
 8005796:	42a5      	cmp	r5, r4
 8005798:	d105      	bne.n	80057a6 <__libc_init_array+0x2e>
 800579a:	bd70      	pop	{r4, r5, r6, pc}
 800579c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057a0:	4798      	blx	r3
 80057a2:	3501      	adds	r5, #1
 80057a4:	e7ee      	b.n	8005784 <__libc_init_array+0xc>
 80057a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057aa:	4798      	blx	r3
 80057ac:	3501      	adds	r5, #1
 80057ae:	e7f2      	b.n	8005796 <__libc_init_array+0x1e>
 80057b0:	08005830 	.word	0x08005830
 80057b4:	08005830 	.word	0x08005830
 80057b8:	08005830 	.word	0x08005830
 80057bc:	08005834 	.word	0x08005834

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
